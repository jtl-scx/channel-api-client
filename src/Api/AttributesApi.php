<?php
/**
 * AttributesApi
 * PHP version 5
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * # Changelog  ## 2019-08-27  * add `GET /channel/events` call to retrive all channels avaiable seller events through SCX platform. (EA-1985)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use JTL\SCX\Client\Channel\ApiException;
use JTL\SCX\Client\Channel\Configuration;
use JTL\SCX\Client\Channel\HeaderSelector;
use JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * AttributesApi Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AttributesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCategoryAttributes
     *
     * Category Attributes
     *
     * @param  string $category_id Assing attributes to a former created channel category. If no categoryId is provided the attribut will be assigned to the global channel scope, which means that every offer may require such an attribute. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list attribute_list (optional)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createCategoryAttributes($category_id, $content_encoding = null, $attribute_list = null)
    {
        $this->createCategoryAttributesWithHttpInfo($category_id, $content_encoding, $attribute_list);
    }

    /**
     * Operation createCategoryAttributesWithHttpInfo
     *
     * Category Attributes
     *
     * @param  string $category_id Assing attributes to a former created channel category. If no categoryId is provided the attribut will be assigned to the global channel scope, which means that every offer may require such an attribute. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCategoryAttributesWithHttpInfo($category_id, $content_encoding = null, $attribute_list = null)
    {
        $request = $this->createCategoryAttributesRequest($category_id, $content_encoding, $attribute_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCategoryAttributesAsync
     *
     * Category Attributes
     *
     * @param  string $category_id Assing attributes to a former created channel category. If no categoryId is provided the attribut will be assigned to the global channel scope, which means that every offer may require such an attribute. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCategoryAttributesAsync($category_id, $content_encoding = null, $attribute_list = null)
    {
        return $this->createCategoryAttributesAsyncWithHttpInfo($category_id, $content_encoding, $attribute_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCategoryAttributesAsyncWithHttpInfo
     *
     * Category Attributes
     *
     * @param  string $category_id Assing attributes to a former created channel category. If no categoryId is provided the attribut will be assigned to the global channel scope, which means that every offer may require such an attribute. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCategoryAttributesAsyncWithHttpInfo($category_id, $content_encoding = null, $attribute_list = null)
    {
        $returnType = '';
        $request = $this->createCategoryAttributesRequest($category_id, $content_encoding, $attribute_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCategoryAttributes'
     *
     * @param  string $category_id Assing attributes to a former created channel category. If no categoryId is provided the attribut will be assigned to the global channel scope, which means that every offer may require such an attribute. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCategoryAttributesRequest($category_id, $content_encoding = null, $attribute_list = null)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling createCategoryAttributes'
            );
        }
        if (strlen($category_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$category_id" when calling AttributesApi.createCategoryAttributes, must be smaller than or equal to 32.');
        }
        if (strlen($category_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$category_id" when calling AttributesApi.createCategoryAttributes, must be bigger than or equal to 1.');
        }


        $resourcePath = '/channel/attribute/category/{categoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_encoding !== null) {
            $headerParams['Content-Encoding'] = ObjectSerializer::toHeaderValue($content_encoding);
        }

        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryId' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($attribute_list)) {
            $_tempBody = $attribute_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createGlobalAttributes
     *
     * Global Attributes
     *
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list attribute_list (optional)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createGlobalAttributes($content_encoding = null, $attribute_list = null)
    {
        $this->createGlobalAttributesWithHttpInfo($content_encoding, $attribute_list);
    }

    /**
     * Operation createGlobalAttributesWithHttpInfo
     *
     * Global Attributes
     *
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createGlobalAttributesWithHttpInfo($content_encoding = null, $attribute_list = null)
    {
        $request = $this->createGlobalAttributesRequest($content_encoding, $attribute_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createGlobalAttributesAsync
     *
     * Global Attributes
     *
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGlobalAttributesAsync($content_encoding = null, $attribute_list = null)
    {
        return $this->createGlobalAttributesAsyncWithHttpInfo($content_encoding, $attribute_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createGlobalAttributesAsyncWithHttpInfo
     *
     * Global Attributes
     *
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGlobalAttributesAsyncWithHttpInfo($content_encoding = null, $attribute_list = null)
    {
        $returnType = '';
        $request = $this->createGlobalAttributesRequest($content_encoding, $attribute_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createGlobalAttributes'
     *
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createGlobalAttributesRequest($content_encoding = null, $attribute_list = null)
    {

        $resourcePath = '/channel/attribute/global';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_encoding !== null) {
            $headerParams['Content-Encoding'] = ObjectSerializer::toHeaderValue($content_encoding);
        }


        // body params
        $_tempBody = null;
        if (isset($attribute_list)) {
            $_tempBody = $attribute_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSellerAttributes
     *
     * Seller Attributes
     *
     * @param  string $seller_id A unique Id identify a Seller on a specific SalesChannel. The SellerId is generated from the Channel itself during the Seller SignUp Process. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list attribute_list (optional)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createSellerAttributes($seller_id, $content_encoding = null, $attribute_list = null)
    {
        $this->createSellerAttributesWithHttpInfo($seller_id, $content_encoding, $attribute_list);
    }

    /**
     * Operation createSellerAttributesWithHttpInfo
     *
     * Seller Attributes
     *
     * @param  string $seller_id A unique Id identify a Seller on a specific SalesChannel. The SellerId is generated from the Channel itself during the Seller SignUp Process. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSellerAttributesWithHttpInfo($seller_id, $content_encoding = null, $attribute_list = null)
    {
        $request = $this->createSellerAttributesRequest($seller_id, $content_encoding, $attribute_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSellerAttributesAsync
     *
     * Seller Attributes
     *
     * @param  string $seller_id A unique Id identify a Seller on a specific SalesChannel. The SellerId is generated from the Channel itself during the Seller SignUp Process. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSellerAttributesAsync($seller_id, $content_encoding = null, $attribute_list = null)
    {
        return $this->createSellerAttributesAsyncWithHttpInfo($seller_id, $content_encoding, $attribute_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSellerAttributesAsyncWithHttpInfo
     *
     * Seller Attributes
     *
     * @param  string $seller_id A unique Id identify a Seller on a specific SalesChannel. The SellerId is generated from the Channel itself during the Seller SignUp Process. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSellerAttributesAsyncWithHttpInfo($seller_id, $content_encoding = null, $attribute_list = null)
    {
        $returnType = '';
        $request = $this->createSellerAttributesRequest($seller_id, $content_encoding, $attribute_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSellerAttributes'
     *
     * @param  string $seller_id A unique Id identify a Seller on a specific SalesChannel. The SellerId is generated from the Channel itself during the Seller SignUp Process. (required)
     * @param  string $content_encoding Use the Content-Encoding: gzip when sending JSON requestBody as compressed payload. This is recommended when creating huge category trees. There is a limit of 32 MB on this route. (optional)
     * @param  \JTL\SCX\Client\Channel\Model\AttributeList $attribute_list (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSellerAttributesRequest($seller_id, $content_encoding = null, $attribute_list = null)
    {
        // verify the required parameter 'seller_id' is set
        if ($seller_id === null || (is_array($seller_id) && count($seller_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller_id when calling createSellerAttributes'
            );
        }
        if (!preg_match("/^\\w{1,50}$/", $seller_id)) {
            throw new \InvalidArgumentException("invalid value for \"seller_id\" when calling AttributesApi.createSellerAttributes, must conform to the pattern /^\\w{1,50}$/.");
        }


        $resourcePath = '/channel/attribute/seller/{sellerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_encoding !== null) {
            $headerParams['Content-Encoding'] = ObjectSerializer::toHeaderValue($content_encoding);
        }

        // path params
        if ($seller_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sellerId' . '}',
                ObjectSerializer::toPathValue($seller_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($attribute_list)) {
            $_tempBody = $attribute_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCategoryAttributeById
     *
     * Category Attribute
     *
     * @param  string $attribute_id attribute_id (required)
     * @param  string $category_id category_id (required)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCategoryAttributeById($attribute_id, $category_id)
    {
        $this->deleteCategoryAttributeByIdWithHttpInfo($attribute_id, $category_id);
    }

    /**
     * Operation deleteCategoryAttributeByIdWithHttpInfo
     *
     * Category Attribute
     *
     * @param  string $attribute_id (required)
     * @param  string $category_id (required)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCategoryAttributeByIdWithHttpInfo($attribute_id, $category_id)
    {
        $request = $this->deleteCategoryAttributeByIdRequest($attribute_id, $category_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCategoryAttributeByIdAsync
     *
     * Category Attribute
     *
     * @param  string $attribute_id (required)
     * @param  string $category_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCategoryAttributeByIdAsync($attribute_id, $category_id)
    {
        return $this->deleteCategoryAttributeByIdAsyncWithHttpInfo($attribute_id, $category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCategoryAttributeByIdAsyncWithHttpInfo
     *
     * Category Attribute
     *
     * @param  string $attribute_id (required)
     * @param  string $category_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCategoryAttributeByIdAsyncWithHttpInfo($attribute_id, $category_id)
    {
        $returnType = '';
        $request = $this->deleteCategoryAttributeByIdRequest($attribute_id, $category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCategoryAttributeById'
     *
     * @param  string $attribute_id (required)
     * @param  string $category_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCategoryAttributeByIdRequest($attribute_id, $category_id)
    {
        // verify the required parameter 'attribute_id' is set
        if ($attribute_id === null || (is_array($attribute_id) && count($attribute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_id when calling deleteCategoryAttributeById'
            );
        }
        if (strlen($attribute_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$attribute_id" when calling AttributesApi.deleteCategoryAttributeById, must be smaller than or equal to 32.');
        }
        if (strlen($attribute_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$attribute_id" when calling AttributesApi.deleteCategoryAttributeById, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling deleteCategoryAttributeById'
            );
        }
        if (strlen($category_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$category_id" when calling AttributesApi.deleteCategoryAttributeById, must be smaller than or equal to 32.');
        }
        if (strlen($category_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$category_id" when calling AttributesApi.deleteCategoryAttributeById, must be bigger than or equal to 1.');
        }


        $resourcePath = '/channel/attribute/{attributeId}/category/{categoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($attribute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeId' . '}',
                ObjectSerializer::toPathValue($attribute_id),
                $resourcePath
            );
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryId' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteGlobalAttributeById
     *
     * Global Attributes
     *
     * @param  string $attribute_id attribute_id (required)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteGlobalAttributeById($attribute_id)
    {
        $this->deleteGlobalAttributeByIdWithHttpInfo($attribute_id);
    }

    /**
     * Operation deleteGlobalAttributeByIdWithHttpInfo
     *
     * Global Attributes
     *
     * @param  string $attribute_id (required)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGlobalAttributeByIdWithHttpInfo($attribute_id)
    {
        $request = $this->deleteGlobalAttributeByIdRequest($attribute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteGlobalAttributeByIdAsync
     *
     * Global Attributes
     *
     * @param  string $attribute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGlobalAttributeByIdAsync($attribute_id)
    {
        return $this->deleteGlobalAttributeByIdAsyncWithHttpInfo($attribute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteGlobalAttributeByIdAsyncWithHttpInfo
     *
     * Global Attributes
     *
     * @param  string $attribute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGlobalAttributeByIdAsyncWithHttpInfo($attribute_id)
    {
        $returnType = '';
        $request = $this->deleteGlobalAttributeByIdRequest($attribute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteGlobalAttributeById'
     *
     * @param  string $attribute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteGlobalAttributeByIdRequest($attribute_id)
    {
        // verify the required parameter 'attribute_id' is set
        if ($attribute_id === null || (is_array($attribute_id) && count($attribute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_id when calling deleteGlobalAttributeById'
            );
        }
        if (strlen($attribute_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$attribute_id" when calling AttributesApi.deleteGlobalAttributeById, must be smaller than or equal to 32.');
        }
        if (strlen($attribute_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$attribute_id" when calling AttributesApi.deleteGlobalAttributeById, must be bigger than or equal to 1.');
        }


        $resourcePath = '/channel/attribute/global/{attributeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($attribute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeId' . '}',
                ObjectSerializer::toPathValue($attribute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSellerAttributeById
     *
     * Seller Attributes
     *
     * @param  string $attribute_id attribute_id (required)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSellerAttributeById($attribute_id)
    {
        $this->deleteSellerAttributeByIdWithHttpInfo($attribute_id);
    }

    /**
     * Operation deleteSellerAttributeByIdWithHttpInfo
     *
     * Seller Attributes
     *
     * @param  string $attribute_id (required)
     *
     * @throws \JTL\SCX\Client\Channel\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSellerAttributeByIdWithHttpInfo($attribute_id)
    {
        $request = $this->deleteSellerAttributeByIdRequest($attribute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JTL\SCX\Client\Channel\Model\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSellerAttributeByIdAsync
     *
     * Seller Attributes
     *
     * @param  string $attribute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSellerAttributeByIdAsync($attribute_id)
    {
        return $this->deleteSellerAttributeByIdAsyncWithHttpInfo($attribute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSellerAttributeByIdAsyncWithHttpInfo
     *
     * Seller Attributes
     *
     * @param  string $attribute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSellerAttributeByIdAsyncWithHttpInfo($attribute_id)
    {
        $returnType = '';
        $request = $this->deleteSellerAttributeByIdRequest($attribute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSellerAttributeById'
     *
     * @param  string $attribute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSellerAttributeByIdRequest($attribute_id)
    {
        // verify the required parameter 'attribute_id' is set
        if ($attribute_id === null || (is_array($attribute_id) && count($attribute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attribute_id when calling deleteSellerAttributeById'
            );
        }
        if (strlen($attribute_id) > 32) {
            throw new \InvalidArgumentException('invalid length for "$attribute_id" when calling AttributesApi.deleteSellerAttributeById, must be smaller than or equal to 32.');
        }
        if (strlen($attribute_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$attribute_id" when calling AttributesApi.deleteSellerAttributeById, must be bigger than or equal to 1.');
        }


        $resourcePath = '/channel/attribute/seller/{attributeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($attribute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attributeId' . '}',
                ObjectSerializer::toPathValue($attribute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
