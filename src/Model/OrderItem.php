<?php
/**
 * OrderItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;
use ArrayAccess;
use JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * OrderItem Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrderItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @param OrderItemStatus
      * @param OrderItemPaymentStatus
      * @param \DateTime
      * @param \DateTime
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orderItemId' => 'string',
        'type' => 'string',
        'itemStatus' => '\JTL\SCX\Client\Channel\Model\OrderItemStatus',
        'itemPaymentStatus' => '\JTL\SCX\Client\Channel\Model\OrderItemPaymentStatus',
        'grossPrice' => 'string',
        'total' => 'string',
        'taxPercent' => 'string',
        'grossFee' => 'string',
        'offerId' => 'int',
        'channelOfferId' => 'string',
        'sku' => 'string',
        'quantity' => 'string',
        'title' => 'string',
        'estimatedShippingDate' => '\DateTime',
        'estimatedDeliveryDate' => '\DateTime',
        'remainingQuantity' => 'string',
        'shippingGroup' => 'string',
        'note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'orderItemId' => 'string',
        'type' => null,
        'itemStatus' => null,
        'itemPaymentStatus' => null,
        'grossPrice' => null,
        'total' => null,
        'taxPercent' => null,
        'grossFee' => null,
        'offerId' => 'int64',
        'channelOfferId' => null,
        'sku' => null,
        'quantity' => null,
        'title' => null,
        'estimatedShippingDate' => 'date-time',
        'estimatedDeliveryDate' => 'date-time',
        'remainingQuantity' => null,
        'shippingGroup' => null,
        'note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @codeCoverageIgnore
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     * @codeCoverageIgnore
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderItemId' => 'orderItemId',
        'type' => 'type',
        'itemStatus' => 'itemStatus',
        'itemPaymentStatus' => 'itemPaymentStatus',
        'grossPrice' => 'grossPrice',
        'total' => 'total',
        'taxPercent' => 'taxPercent',
        'grossFee' => 'grossFee',
        'offerId' => 'offerId',
        'channelOfferId' => 'channelOfferId',
        'sku' => 'sku',
        'quantity' => 'quantity',
        'title' => 'title',
        'estimatedShippingDate' => 'estimatedShippingDate',
        'estimatedDeliveryDate' => 'estimatedDeliveryDate',
        'remainingQuantity' => 'remainingQuantity',
        'shippingGroup' => 'shippingGroup',
        'note' => 'note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderItemId' => 'setOrderItemId',
        'type' => 'setType',
        'itemStatus' => 'setItemStatus',
        'itemPaymentStatus' => 'setItemPaymentStatus',
        'grossPrice' => 'setGrossPrice',
        'total' => 'setTotal',
        'taxPercent' => 'setTaxPercent',
        'grossFee' => 'setGrossFee',
        'offerId' => 'setOfferId',
        'channelOfferId' => 'setChannelOfferId',
        'sku' => 'setSku',
        'quantity' => 'setQuantity',
        'title' => 'setTitle',
        'estimatedShippingDate' => 'setEstimatedShippingDate',
        'estimatedDeliveryDate' => 'setEstimatedDeliveryDate',
        'remainingQuantity' => 'setRemainingQuantity',
        'shippingGroup' => 'setShippingGroup',
        'note' => 'setNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderItemId' => 'getOrderItemId',
        'type' => 'getType',
        'itemStatus' => 'getItemStatus',
        'itemPaymentStatus' => 'getItemPaymentStatus',
        'grossPrice' => 'getGrossPrice',
        'total' => 'getTotal',
        'taxPercent' => 'getTaxPercent',
        'grossFee' => 'getGrossFee',
        'offerId' => 'getOfferId',
        'channelOfferId' => 'getChannelOfferId',
        'sku' => 'getSku',
        'quantity' => 'getQuantity',
        'title' => 'getTitle',
        'estimatedShippingDate' => 'getEstimatedShippingDate',
        'estimatedDeliveryDate' => 'getEstimatedDeliveryDate',
        'remainingQuantity' => 'getRemainingQuantity',
        'shippingGroup' => 'getShippingGroup',
        'note' => 'getNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     * @codeCoverageIgnore
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @codeCoverageIgnore
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @codeCoverageIgnore
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     * @codeCoverageIgnore
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    public function __construct(array $data = null)
    {
        $this->container['orderItemId'] = $data['orderItemId'] ?? null;
        $this->container['type'] = $data['type'] ?? 'PAYMENT';
        $this->container['itemStatus'] = $data['itemStatus'] ?? null;
        $this->container['itemPaymentStatus'] = $data['itemPaymentStatus'] ?? null;
        $this->container['grossPrice'] = $data['grossPrice'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['taxPercent'] = $data['taxPercent'] ?? null;
        $this->container['grossFee'] = $data['grossFee'] ?? null;
        $this->container['offerId'] = $data['offerId'] ?? null;
        $this->container['channelOfferId'] = $data['channelOfferId'] ?? null;
        $this->container['sku'] = $data['sku'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? '1.0';
        $this->container['title'] = $data['title'] ?? null;
        $this->container['estimatedShippingDate'] = $data['estimatedShippingDate'] ?? null;
        $this->container['estimatedDeliveryDate'] = $data['estimatedDeliveryDate'] ?? null;
        $this->container['remainingQuantity'] = $data['remainingQuantity'] ?? null;
        $this->container['shippingGroup'] = $data['shippingGroup'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     * @codeCoverageIgnore
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orderItemId'] === null) {
            $invalidProperties[] = "'orderItemId' can't be null";
        }
        if ((mb_strlen($this->container['orderItemId']) > 50)) {
            $invalidProperties[] = "invalid value for 'orderItemId', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['orderItemId']) < 1)) {
            $invalidProperties[] = "invalid value for 'orderItemId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['grossPrice'] === null) {
            $invalidProperties[] = "'grossPrice' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ($this->container['taxPercent'] === null) {
            $invalidProperties[] = "'taxPercent' can't be null";
        }
        if (!is_null($this->container['offerId']) && ($this->container['offerId'] < 1)) {
            $invalidProperties[] = "invalid value for 'offerId', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['channelOfferId']) && (mb_strlen($this->container['channelOfferId']) > 50)) {
            $invalidProperties[] = "invalid value for 'channelOfferId', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['channelOfferId']) && (mb_strlen($this->container['channelOfferId']) < 1)) {
            $invalidProperties[] = "invalid value for 'channelOfferId', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sku']) && (mb_strlen($this->container['sku']) > 150)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['sku']) && (mb_strlen($this->container['sku']) < 1)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['shippingGroup'] === null) {
            $invalidProperties[] = "'shippingGroup' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     * @codeCoverageIgnore
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    public function getOrderItemId(): string
    {
        return $this->container['orderItemId'];
    }

    public function setOrderItemId(string $orderItemId): OrderItem
    {
        $this->container['orderItemId'] = $orderItemId;
        return $this;
    }


    public function getType(): string
    {
        return $this->container['type'];
    }

    public function setType(string $type): OrderItem
    {
        $this->container['type'] = $type;
        return $this;
    }


    public function getItemStatus(): ?OrderItemStatus
    {
        return $this->container['itemStatus'];
    }

    public function setItemStatus(?OrderItemStatus $itemStatus): OrderItem
    {
        $this->container['itemStatus'] = $itemStatus;
        return $this;
    }


    public function getItemPaymentStatus(): ?OrderItemPaymentStatus
    {
        return $this->container['itemPaymentStatus'];
    }

    public function setItemPaymentStatus(?OrderItemPaymentStatus $itemPaymentStatus): OrderItem
    {
        $this->container['itemPaymentStatus'] = $itemPaymentStatus;
        return $this;
    }


    public function getGrossPrice(): string
    {
        return $this->container['grossPrice'];
    }

    public function setGrossPrice(string $grossPrice): OrderItem
    {
        $this->container['grossPrice'] = $grossPrice;
        return $this;
    }


    public function getTotal(): string
    {
        return $this->container['total'];
    }

    public function setTotal(string $total): OrderItem
    {
        $this->container['total'] = $total;
        return $this;
    }


    public function getTaxPercent(): string
    {
        return $this->container['taxPercent'];
    }

    public function setTaxPercent(string $taxPercent): OrderItem
    {
        $this->container['taxPercent'] = $taxPercent;
        return $this;
    }


    public function getGrossFee(): ?string
    {
        return $this->container['grossFee'];
    }

    public function setGrossFee(?string $grossFee): OrderItem
    {
        $this->container['grossFee'] = $grossFee;
        return $this;
    }


    public function getOfferId(): ?int
    {
        return $this->container['offerId'];
    }

    public function setOfferId(?int $offerId): OrderItem
    {
        $this->container['offerId'] = $offerId;
        return $this;
    }


    public function getChannelOfferId(): ?string
    {
        return $this->container['channelOfferId'];
    }

    public function setChannelOfferId(?string $channelOfferId): OrderItem
    {
        $this->container['channelOfferId'] = $channelOfferId;
        return $this;
    }


    public function getSku(): ?string
    {
        return $this->container['sku'];
    }

    public function setSku(?string $sku): OrderItem
    {
        $this->container['sku'] = $sku;
        return $this;
    }


    public function getQuantity(): ?string
    {
        return $this->container['quantity'];
    }

    public function setQuantity(?string $quantity): OrderItem
    {
        $this->container['quantity'] = $quantity;
        return $this;
    }


    public function getTitle(): ?string
    {
        return $this->container['title'];
    }

    public function setTitle(?string $title): OrderItem
    {
        $this->container['title'] = $title;
        return $this;
    }


    public function getEstimatedShippingDate(): ?\DateTime
    {
        return $this->container['estimatedShippingDate'];
    }

    public function setEstimatedShippingDate(?\DateTime $estimatedShippingDate): OrderItem
    {
        $this->container['estimatedShippingDate'] = $estimatedShippingDate;
        return $this;
    }


    public function getEstimatedDeliveryDate(): ?\DateTime
    {
        return $this->container['estimatedDeliveryDate'];
    }

    public function setEstimatedDeliveryDate(?\DateTime $estimatedDeliveryDate): OrderItem
    {
        $this->container['estimatedDeliveryDate'] = $estimatedDeliveryDate;
        return $this;
    }


    public function getRemainingQuantity(): ?string
    {
        return $this->container['remainingQuantity'];
    }

    public function setRemainingQuantity(?string $remainingQuantity): OrderItem
    {
        $this->container['remainingQuantity'] = $remainingQuantity;
        return $this;
    }


    public function getShippingGroup(): string
    {
        return $this->container['shippingGroup'];
    }

    public function setShippingGroup(string $shippingGroup): OrderItem
    {
        $this->container['shippingGroup'] = $shippingGroup;
        return $this;
    }


    public function getNote(): ?string
    {
        return $this->container['note'];
    }

    public function setNote(?string $note): OrderItem
    {
        $this->container['note'] = $note;
        return $this;
    }

    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     * @codeCoverageIgnore
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     * @codeCoverageIgnore
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     * @codeCoverageIgnore
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     * @codeCoverageIgnore
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            $this->jsonSerialize(),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     * @codeCoverageIgnore
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode($this->jsonSerialize());
    }
}


