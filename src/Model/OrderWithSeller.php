<?php
/**
 * OrderWithSeller
 *
 * PHP version 5
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * # Changelog  ## 2019-08-27  * add `GET /channel/events` call to retrive all channels avaiable seller events through SCX platform. (EA-1985)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;

use ArrayAccess;
use JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * OrderWithSeller Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderWithSeller implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderWithSeller';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orderStatus' => '\JTL\SCX\Client\Channel\Model\OrderStatus',
        'paymentStatus' => '\JTL\SCX\Client\Channel\Model\PaymentStatus',
        'orderId' => 'string',
        'purchasedAt' => '\DateTime',
        'lastChangedAt' => '\DateTime',
        'shippingCost' => 'string',
        'shippingGroup' => 'string',
        'currency' => 'string',
        'orderItem' => '\JTL\SCX\Client\Channel\Model\OrderItem[]',
        'billingAddress' => '\JTL\SCX\Client\Channel\Model\Address',
        'shippingAddress' => '\JTL\SCX\Client\Channel\Model\Address',
        'note' => 'string',
        'sellerId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'orderStatus' => null,
        'paymentStatus' => null,
        'orderId' => null,
        'purchasedAt' => 'date-time',
        'lastChangedAt' => 'date-time',
        'shippingCost' => null,
        'shippingGroup' => null,
        'currency' => null,
        'orderItem' => null,
        'billingAddress' => null,
        'shippingAddress' => null,
        'note' => null,
        'sellerId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderStatus' => 'orderStatus',
        'paymentStatus' => 'paymentStatus',
        'orderId' => 'orderId',
        'purchasedAt' => 'purchasedAt',
        'lastChangedAt' => 'lastChangedAt',
        'shippingCost' => 'shippingCost',
        'shippingGroup' => 'shippingGroup',
        'currency' => 'currency',
        'orderItem' => 'orderItem',
        'billingAddress' => 'billingAddress',
        'shippingAddress' => 'shippingAddress',
        'note' => 'note',
        'sellerId' => 'sellerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderStatus' => 'setOrderStatus',
        'paymentStatus' => 'setPaymentStatus',
        'orderId' => 'setOrderId',
        'purchasedAt' => 'setPurchasedAt',
        'lastChangedAt' => 'setLastChangedAt',
        'shippingCost' => 'setShippingCost',
        'shippingGroup' => 'setShippingGroup',
        'currency' => 'setCurrency',
        'orderItem' => 'setOrderItem',
        'billingAddress' => 'setBillingAddress',
        'shippingAddress' => 'setShippingAddress',
        'note' => 'setNote',
        'sellerId' => 'setSellerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderStatus' => 'getOrderStatus',
        'paymentStatus' => 'getPaymentStatus',
        'orderId' => 'getOrderId',
        'purchasedAt' => 'getPurchasedAt',
        'lastChangedAt' => 'getLastChangedAt',
        'shippingCost' => 'getShippingCost',
        'shippingGroup' => 'getShippingGroup',
        'currency' => 'getCurrency',
        'orderItem' => 'getOrderItem',
        'billingAddress' => 'getBillingAddress',
        'shippingAddress' => 'getShippingAddress',
        'note' => 'getNote',
        'sellerId' => 'getSellerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderStatus'] = isset($data['orderStatus']) ? $data['orderStatus'] : null;
        $this->container['paymentStatus'] = isset($data['paymentStatus']) ? $data['paymentStatus'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['purchasedAt'] = isset($data['purchasedAt']) ? $data['purchasedAt'] : null;
        $this->container['lastChangedAt'] = isset($data['lastChangedAt']) ? $data['lastChangedAt'] : null;
        $this->container['shippingCost'] = isset($data['shippingCost']) ? $data['shippingCost'] : null;
        $this->container['shippingGroup'] = isset($data['shippingGroup']) ? $data['shippingGroup'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['orderItem'] = isset($data['orderItem']) ? $data['orderItem'] : null;
        $this->container['billingAddress'] = isset($data['billingAddress']) ? $data['billingAddress'] : null;
        $this->container['shippingAddress'] = isset($data['shippingAddress']) ? $data['shippingAddress'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['sellerId'] = isset($data['sellerId']) ? $data['sellerId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orderStatus'] === null) {
            $invalidProperties[] = "'orderStatus' can't be null";
        }
        if ($this->container['paymentStatus'] === null) {
            $invalidProperties[] = "'paymentStatus' can't be null";
        }
        if ($this->container['orderId'] === null) {
            $invalidProperties[] = "'orderId' can't be null";
        }
        if ($this->container['purchasedAt'] === null) {
            $invalidProperties[] = "'purchasedAt' can't be null";
        }
        if ($this->container['lastChangedAt'] === null) {
            $invalidProperties[] = "'lastChangedAt' can't be null";
        }
        if ($this->container['shippingCost'] === null) {
            $invalidProperties[] = "'shippingCost' can't be null";
        }
        if ($this->container['shippingGroup'] === null) {
            $invalidProperties[] = "'shippingGroup' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['billingAddress'] === null) {
            $invalidProperties[] = "'billingAddress' can't be null";
        }
        if ($this->container['shippingAddress'] === null) {
            $invalidProperties[] = "'shippingAddress' can't be null";
        }
        if ($this->container['sellerId'] === null) {
            $invalidProperties[] = "'sellerId' can't be null";
        }
        if (!preg_match("/^\\w{1,50}$/", $this->container['sellerId'])) {
            $invalidProperties[] = "invalid value for 'sellerId', must be conform to the pattern /^\\w{1,50}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderStatus
     *
     * @return \JTL\SCX\Client\Channel\Model\OrderStatus
     */
    public function getOrderStatus()
    {
        return $this->container['orderStatus'];
    }

    /**
     * Sets orderStatus
     *
     * @param \JTL\SCX\Client\Channel\Model\OrderStatus $orderStatus orderStatus
     *
     * @return $this
     */
    public function setOrderStatus($orderStatus)
    {
        $this->container['orderStatus'] = $orderStatus;

        return $this;
    }

    /**
     * Gets paymentStatus
     *
     * @return \JTL\SCX\Client\Channel\Model\PaymentStatus
     */
    public function getPaymentStatus()
    {
        return $this->container['paymentStatus'];
    }

    /**
     * Sets paymentStatus
     *
     * @param \JTL\SCX\Client\Channel\Model\PaymentStatus $paymentStatus paymentStatus
     *
     * @return $this
     */
    public function setPaymentStatus($paymentStatus)
    {
        $this->container['paymentStatus'] = $paymentStatus;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId orderId
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets purchasedAt
     *
     * @return \DateTime
     */
    public function getPurchasedAt()
    {
        return $this->container['purchasedAt'];
    }

    /**
     * Sets purchasedAt
     *
     * @param \DateTime $purchasedAt purchasedAt
     *
     * @return $this
     */
    public function setPurchasedAt($purchasedAt)
    {
        $this->container['purchasedAt'] = $purchasedAt;

        return $this;
    }

    /**
     * Gets lastChangedAt
     *
     * @return \DateTime
     */
    public function getLastChangedAt()
    {
        return $this->container['lastChangedAt'];
    }

    /**
     * Sets lastChangedAt
     *
     * @param \DateTime $lastChangedAt lastChangedAt
     *
     * @return $this
     */
    public function setLastChangedAt($lastChangedAt)
    {
        $this->container['lastChangedAt'] = $lastChangedAt;

        return $this;
    }

    /**
     * Gets shippingCost
     *
     * @return string
     */
    public function getShippingCost()
    {
        return $this->container['shippingCost'];
    }

    /**
     * Sets shippingCost
     *
     * @param string $shippingCost shippingCost
     *
     * @return $this
     */
    public function setShippingCost($shippingCost)
    {
        $this->container['shippingCost'] = $shippingCost;

        return $this;
    }

    /**
     * Gets shippingGroup
     *
     * @return string
     */
    public function getShippingGroup()
    {
        return $this->container['shippingGroup'];
    }

    /**
     * Sets shippingGroup
     *
     * @param string $shippingGroup shippingGroup
     *
     * @return $this
     */
    public function setShippingGroup($shippingGroup)
    {
        $this->container['shippingGroup'] = $shippingGroup;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets orderItem
     *
     * @return \JTL\SCX\Client\Channel\Model\OrderItem[]|null
     */
    public function getOrderItem()
    {
        return $this->container['orderItem'];
    }

    /**
     * Sets orderItem
     *
     * @param \JTL\SCX\Client\Channel\Model\OrderItem[]|null $orderItem orderItem
     *
     * @return $this
     */
    public function setOrderItem($orderItem)
    {
        $this->container['orderItem'] = $orderItem;

        return $this;
    }

    /**
     * Gets billingAddress
     *
     * @return \JTL\SCX\Client\Channel\Model\Address
     */
    public function getBillingAddress()
    {
        return $this->container['billingAddress'];
    }

    /**
     * Sets billingAddress
     *
     * @param \JTL\SCX\Client\Channel\Model\Address $billingAddress billingAddress
     *
     * @return $this
     */
    public function setBillingAddress($billingAddress)
    {
        $this->container['billingAddress'] = $billingAddress;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \JTL\SCX\Client\Channel\Model\Address
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \JTL\SCX\Client\Channel\Model\Address $shippingAddress shippingAddress
     *
     * @return $this
     */
    public function setShippingAddress($shippingAddress)
    {
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note A optional note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets sellerId
     *
     * @return string
     */
    public function getSellerId()
    {
        return $this->container['sellerId'];
    }

    /**
     * Sets sellerId
     *
     * @param string $sellerId A unique Id identify a Seller on a specific SalesChannel. The SellerId is generated from the Channel itself during the Seller SignUp Process.
     *
     * @return $this
     */
    public function setSellerId($sellerId)
    {

        if ((!preg_match("/^\\w{1,50}$/", $sellerId))) {
            throw new \InvalidArgumentException("invalid value for $sellerId when calling OrderWithSeller., must conform to the pattern /^\\w{1,50}$/.");
        }

        $this->container['sellerId'] = $sellerId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


