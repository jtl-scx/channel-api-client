<?php
/**
 * SalesChannelOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * # Changelog  ## 2019-08-27  * add `GET /channel/events` call to retrive all channels avaiable seller events through SCX platform. (EA-1985)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;

use \ArrayAccess;
use \JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * SalesChannelOffer Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalesChannelOffer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SalesChannelOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'seller_id' => 'string',
        'offer_id' => 'int',
        'channel_category_id' => 'string',
        'quantity' => 'string',
        'price_list' => 'object[]',
        'title' => 'string',
        'sub_title' => 'string',
        'description' => 'string',
        'main_picture' => 'string',
        'picture_list' => 'string[]',
        'channel_attribute_list' => '\JTL\SCX\Client\Channel\Model\SalesChannelAttributeList[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'seller_id' => null,
        'offer_id' => 'int64',
        'channel_category_id' => null,
        'quantity' => null,
        'price_list' => null,
        'title' => null,
        'sub_title' => null,
        'description' => null,
        'main_picture' => null,
        'picture_list' => null,
        'channel_attribute_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seller_id' => 'sellerId',
        'offer_id' => 'offerId',
        'channel_category_id' => 'channelCategoryId',
        'quantity' => 'quantity',
        'price_list' => 'priceList',
        'title' => 'title',
        'sub_title' => 'subTitle',
        'description' => 'description',
        'main_picture' => 'mainPicture',
        'picture_list' => 'pictureList',
        'channel_attribute_list' => 'channelAttributeList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'seller_id' => 'setSellerId',
        'offer_id' => 'setOfferId',
        'channel_category_id' => 'setChannelCategoryId',
        'quantity' => 'setQuantity',
        'price_list' => 'setPriceList',
        'title' => 'setTitle',
        'sub_title' => 'setSubTitle',
        'description' => 'setDescription',
        'main_picture' => 'setMainPicture',
        'picture_list' => 'setPictureList',
        'channel_attribute_list' => 'setChannelAttributeList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seller_id' => 'getSellerId',
        'offer_id' => 'getOfferId',
        'channel_category_id' => 'getChannelCategoryId',
        'quantity' => 'getQuantity',
        'price_list' => 'getPriceList',
        'title' => 'getTitle',
        'sub_title' => 'getSubTitle',
        'description' => 'getDescription',
        'main_picture' => 'getMainPicture',
        'picture_list' => 'getPictureList',
        'channel_attribute_list' => 'getChannelAttributeList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seller_id'] = isset($data['seller_id']) ? $data['seller_id'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['channel_category_id'] = isset($data['channel_category_id']) ? $data['channel_category_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['price_list'] = isset($data['price_list']) ? $data['price_list'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['sub_title'] = isset($data['sub_title']) ? $data['sub_title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['main_picture'] = isset($data['main_picture']) ? $data['main_picture'] : null;
        $this->container['picture_list'] = isset($data['picture_list']) ? $data['picture_list'] : null;
        $this->container['channel_attribute_list'] = isset($data['channel_attribute_list']) ? $data['channel_attribute_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['seller_id'] === null) {
            $invalidProperties[] = "'seller_id' can't be null";
        }
        if (!preg_match("/^\\w{1,50}$/", $this->container['seller_id'])) {
            $invalidProperties[] = "invalid value for 'seller_id', must be conform to the pattern /^\\w{1,50}$/.";
        }

        if ($this->container['offer_id'] === null) {
            $invalidProperties[] = "'offer_id' can't be null";
        }
        if (($this->container['offer_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'offer_id', must be bigger than or equal to 1.";
        }

        if ($this->container['price_list'] === null) {
            $invalidProperties[] = "'price_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets seller_id
     *
     * @return string
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param string $seller_id A unique Id identify a Seller on a specific SalesChannel. The SellerId is generated from the Channel itself during the Seller SignUp Process.
     *
     * @return $this
     */
    public function setSellerId($seller_id)
    {

        if ((!preg_match("/^\\w{1,50}$/", $seller_id))) {
            throw new \InvalidArgumentException("invalid value for $seller_id when calling SalesChannelOffer., must conform to the pattern /^\\w{1,50}$/.");
        }

        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param int $offer_id Unique Offer Id to identify a Offer on a Sales Channel.
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {

        if (($offer_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $offer_id when calling SalesChannelOffer., must be bigger than or equal to 1.');
        }

        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets channel_category_id
     *
     * @return string|null
     */
    public function getChannelCategoryId()
    {
        return $this->container['channel_category_id'];
    }

    /**
     * Sets channel_category_id
     *
     * @param string|null $channel_category_id channel_category_id
     *
     * @return $this
     */
    public function setChannelCategoryId($channel_category_id)
    {
        $this->container['channel_category_id'] = $channel_category_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string|null $quantity Offer Quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price_list
     *
     * @return object[]
     */
    public function getPriceList()
    {
        return $this->container['price_list'];
    }

    /**
     * Sets price_list
     *
     * @param object[] $price_list price_list
     *
     * @return $this
     */
    public function setPriceList($price_list)
    {
        $this->container['price_list'] = $price_list;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title used for this specific SalesChannel. If no title is provided, the product title should be used.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets sub_title
     *
     * @return string|null
     */
    public function getSubTitle()
    {
        return $this->container['sub_title'];
    }

    /**
     * Sets sub_title
     *
     * @param string|null $sub_title Subtitle used for this specific SalesChannel. If no subtitle is provided, the product description should be used.
     *
     * @return $this
     */
    public function setSubTitle($sub_title)
    {
        $this->container['sub_title'] = $sub_title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description used for this specific SalesChannel. If no description is provided, the product description should be used.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets main_picture
     *
     * @return string|null
     */
    public function getMainPicture()
    {
        return $this->container['main_picture'];
    }

    /**
     * Sets main_picture
     *
     * @param string|null $main_picture main_picture
     *
     * @return $this
     */
    public function setMainPicture($main_picture)
    {
        $this->container['main_picture'] = $main_picture;

        return $this;
    }

    /**
     * Gets picture_list
     *
     * @return string[]|null
     */
    public function getPictureList()
    {
        return $this->container['picture_list'];
    }

    /**
     * Sets picture_list
     *
     * @param string[]|null $picture_list picture_list
     *
     * @return $this
     */
    public function setPictureList($picture_list)
    {
        $this->container['picture_list'] = $picture_list;

        return $this;
    }

    /**
     * Gets channel_attribute_list
     *
     * @return \JTL\SCX\Client\Channel\Model\SalesChannelAttributeList[]|null
     */
    public function getChannelAttributeList()
    {
        return $this->container['channel_attribute_list'];
    }

    /**
     * Sets channel_attribute_list
     *
     * @param \JTL\SCX\Client\Channel\Model\SalesChannelAttributeList[]|null $channel_attribute_list A List of SalesChannel related attributes. Typicaly all required attributes need to be passed through this objects. Required (and also optinal) attributes can be requested using the /meta Data API endpoints.
     *
     * @return $this
     */
    public function setChannelAttributeList($channel_attribute_list)
    {
        $this->container['channel_attribute_list'] = $channel_attribute_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


