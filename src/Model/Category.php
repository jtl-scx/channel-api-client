<?php
/**
 * Category
 *
 * PHP version 5
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * # Changelog  ## 2019-08-27  * add `GET /channel/events` call to retrive all channels avaiable seller events through SCX platform. (EA-1985)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;

use \ArrayAccess;
use \JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * Category Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Category implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Category';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category_id' => 'string',
        'display_name' => 'string',
        'listing_allowed' => 'bool',
        'parent_category_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'category_id' => null,
        'display_name' => null,
        'listing_allowed' => null,
        'parent_category_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_id' => 'categoryId',
        'display_name' => 'displayName',
        'listing_allowed' => 'listingAllowed',
        'parent_category_id' => 'parentCategoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_id' => 'setCategoryId',
        'display_name' => 'setDisplayName',
        'listing_allowed' => 'setListingAllowed',
        'parent_category_id' => 'setParentCategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_id' => 'getCategoryId',
        'display_name' => 'getDisplayName',
        'listing_allowed' => 'getListingAllowed',
        'parent_category_id' => 'getParentCategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['listing_allowed'] = isset($data['listing_allowed']) ? $data['listing_allowed'] : true;
        $this->container['parent_category_id'] = isset($data['parent_category_id']) ? $data['parent_category_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['category_id'] === null) {
            $invalidProperties[] = "'category_id' can't be null";
        }
        if ((mb_strlen($this->container['category_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'category_id', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['category_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'category_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ((mb_strlen($this->container['display_name']) > 250)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 250.";
        }

        if ((mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['parent_category_id']) && (mb_strlen($this->container['parent_category_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'parent_category_id', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['parent_category_id']) && (mb_strlen($this->container['parent_category_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'parent_category_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_id
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string $category_id Channel category Id.
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        if ((mb_strlen($category_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $category_id when calling Category., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($category_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $category_id when calling Category., must be bigger than or equal to 1.');
        }

        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Category display name.
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        if ((mb_strlen($display_name) > 250)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling Category., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling Category., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets listing_allowed
     *
     * @return bool|null
     */
    public function getListingAllowed()
    {
        return $this->container['listing_allowed'];
    }

    /**
     * Sets listing_allowed
     *
     * @param bool|null $listing_allowed Mark a categoryId as leaf. Only leaf categories can list offers.
     *
     * @return $this
     */
    public function setListingAllowed($listing_allowed)
    {
        $this->container['listing_allowed'] = $listing_allowed;

        return $this;
    }

    /**
     * Gets parent_category_id
     *
     * @return string|null
     */
    public function getParentCategoryId()
    {
        return $this->container['parent_category_id'];
    }

    /**
     * Sets parent_category_id
     *
     * @param string|null $parent_category_id Parent category Id. If category is 0 the current category is considered as root category.
     *
     * @return $this
     */
    public function setParentCategoryId($parent_category_id)
    {
        if (!is_null($parent_category_id) && (mb_strlen($parent_category_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $parent_category_id when calling Category., must be smaller than or equal to 32.');
        }
        if (!is_null($parent_category_id) && (mb_strlen($parent_category_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parent_category_id when calling Category., must be bigger than or equal to 1.');
        }

        $this->container['parent_category_id'] = $parent_category_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


