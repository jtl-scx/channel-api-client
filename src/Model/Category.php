<?php
/**
 * Category
 *
 * PHP version 5
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * # Changelog  ## 2019-09-30  * add `/channel/order/address-update` to update address inforation of an existing order. (EA-2140)  ## 2019-08-27  * add `GET /channel/events` call to retrive all channels avaiable seller events through SCX platform. (EA-1985)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;

use ArrayAccess;
use JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * Category Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Category implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Category';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categoryId' => 'string',
        'displayName' => 'string',
        'listingAllowed' => 'bool',
        'parentCategoryId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'categoryId' => null,
        'displayName' => null,
        'listingAllowed' => null,
        'parentCategoryId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categoryId' => 'categoryId',
        'displayName' => 'displayName',
        'listingAllowed' => 'listingAllowed',
        'parentCategoryId' => 'parentCategoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categoryId' => 'setCategoryId',
        'displayName' => 'setDisplayName',
        'listingAllowed' => 'setListingAllowed',
        'parentCategoryId' => 'setParentCategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categoryId' => 'getCategoryId',
        'displayName' => 'getDisplayName',
        'listingAllowed' => 'getListingAllowed',
        'parentCategoryId' => 'getParentCategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['categoryId'] = isset($data['categoryId']) ? $data['categoryId'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['listingAllowed'] = isset($data['listingAllowed']) ? $data['listingAllowed'] : true;
        $this->container['parentCategoryId'] = isset($data['parentCategoryId']) ? $data['parentCategoryId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['categoryId'] === null) {
            $invalidProperties[] = "'categoryId' can't be null";
        }
        if ((mb_strlen($this->container['categoryId']) > 32)) {
            $invalidProperties[] = "invalid value for 'categoryId', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['categoryId']) < 1)) {
            $invalidProperties[] = "invalid value for 'categoryId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['displayName'] === null) {
            $invalidProperties[] = "'displayName' can't be null";
        }
        if ((mb_strlen($this->container['displayName']) > 250)) {
            $invalidProperties[] = "invalid value for 'displayName', the character length must be smaller than or equal to 250.";
        }

        if ((mb_strlen($this->container['displayName']) < 1)) {
            $invalidProperties[] = "invalid value for 'displayName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['parentCategoryId']) && (mb_strlen($this->container['parentCategoryId']) > 32)) {
            $invalidProperties[] = "invalid value for 'parentCategoryId', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['parentCategoryId']) && (mb_strlen($this->container['parentCategoryId']) < 1)) {
            $invalidProperties[] = "invalid value for 'parentCategoryId', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categoryId
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['categoryId'];
    }

    /**
     * Sets categoryId
     *
     * @param string $categoryId Channel category Id.
     *
     * @return $this
     */
    public function setCategoryId($categoryId)
    {
        if ((mb_strlen($categoryId) > 32)) {
            throw new \InvalidArgumentException('invalid length for $categoryId when calling Category., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($categoryId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $categoryId when calling Category., must be bigger than or equal to 1.');
        }

        $this->container['categoryId'] = $categoryId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Category display name.
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        if ((mb_strlen($displayName) > 250)) {
            throw new \InvalidArgumentException('invalid length for $displayName when calling Category., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($displayName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $displayName when calling Category., must be bigger than or equal to 1.');
        }

        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets listingAllowed
     *
     * @return bool|null
     */
    public function getListingAllowed()
    {
        return $this->container['listingAllowed'];
    }

    /**
     * Sets listingAllowed
     *
     * @param bool|null $listingAllowed Mark a categoryId as leaf. Only leaf categories can list offers.
     *
     * @return $this
     */
    public function setListingAllowed($listingAllowed)
    {
        $this->container['listingAllowed'] = $listingAllowed;

        return $this;
    }

    /**
     * Gets parentCategoryId
     *
     * @return string|null
     */
    public function getParentCategoryId()
    {
        return $this->container['parentCategoryId'];
    }

    /**
     * Sets parentCategoryId
     *
     * @param string|null $parentCategoryId Parent category Id. If category is 0 the current category is considered as root category.
     *
     * @return $this
     */
    public function setParentCategoryId($parentCategoryId)
    {
        if (!is_null($parentCategoryId) && (mb_strlen($parentCategoryId) > 32)) {
            throw new \InvalidArgumentException('invalid length for $parentCategoryId when calling Category., must be smaller than or equal to 32.');
        }
        if (!is_null($parentCategoryId) && (mb_strlen($parentCategoryId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parentCategoryId when calling Category., must be bigger than or equal to 1.');
        }

        $this->container['parentCategoryId'] = $parentCategoryId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


