<?php
/**
 * Attribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * # Changelog  ## 2019-09-30  * add `/channel/order/address-update` to update address inforation of an existing order. (EA-2140)  ## 2019-08-27  * add `GET /channel/events` call to retrive all channels avaiable seller events through SCX platform. (EA-1985)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;

use ArrayAccess;
use JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * Attribute Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Attribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Attribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attributeId' => 'string',
        'displayName' => 'string',
        'isMultipleAllowed' => 'bool',
        'type' => 'string',
        'enumValues' => 'string[]',
        'attributeValueValidation' => 'string',
        'conditionalMandatoryBy' => '\JTL\SCX\Client\Channel\Model\AttributeConditionalMandatoryBy[]',
        'conditionalOptionalBy' => '\JTL\SCX\Client\Channel\Model\AttributeConditionalOptionalBy[]',
        'required' => 'bool',
        'section' => 'string',
        'sectionPosition' => 'int',
        'subSection' => 'string',
        'subSectionPosition' => 'int',
        'description' => 'string',
        'isVariationDimension' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'attributeId' => null,
        'displayName' => null,
        'isMultipleAllowed' => null,
        'type' => null,
        'enumValues' => null,
        'attributeValueValidation' => null,
        'conditionalMandatoryBy' => null,
        'conditionalOptionalBy' => null,
        'required' => null,
        'section' => null,
        'sectionPosition' => null,
        'subSection' => null,
        'subSectionPosition' => null,
        'description' => null,
        'isVariationDimension' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attributeId' => 'attributeId',
        'displayName' => 'displayName',
        'isMultipleAllowed' => 'isMultipleAllowed',
        'type' => 'type',
        'enumValues' => 'enumValues',
        'attributeValueValidation' => 'attributeValueValidation',
        'conditionalMandatoryBy' => 'conditionalMandatoryBy',
        'conditionalOptionalBy' => 'conditionalOptionalBy',
        'required' => 'required',
        'section' => 'section',
        'sectionPosition' => 'sectionPosition',
        'subSection' => 'subSection',
        'subSectionPosition' => 'subSectionPosition',
        'description' => 'description',
        'isVariationDimension' => 'isVariationDimension'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attributeId' => 'setAttributeId',
        'displayName' => 'setDisplayName',
        'isMultipleAllowed' => 'setIsMultipleAllowed',
        'type' => 'setType',
        'enumValues' => 'setEnumValues',
        'attributeValueValidation' => 'setAttributeValueValidation',
        'conditionalMandatoryBy' => 'setConditionalMandatoryBy',
        'conditionalOptionalBy' => 'setConditionalOptionalBy',
        'required' => 'setRequired',
        'section' => 'setSection',
        'sectionPosition' => 'setSectionPosition',
        'subSection' => 'setSubSection',
        'subSectionPosition' => 'setSubSectionPosition',
        'description' => 'setDescription',
        'isVariationDimension' => 'setIsVariationDimension'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attributeId' => 'getAttributeId',
        'displayName' => 'getDisplayName',
        'isMultipleAllowed' => 'getIsMultipleAllowed',
        'type' => 'getType',
        'enumValues' => 'getEnumValues',
        'attributeValueValidation' => 'getAttributeValueValidation',
        'conditionalMandatoryBy' => 'getConditionalMandatoryBy',
        'conditionalOptionalBy' => 'getConditionalOptionalBy',
        'required' => 'getRequired',
        'section' => 'getSection',
        'sectionPosition' => 'getSectionPosition',
        'subSection' => 'getSubSection',
        'subSectionPosition' => 'getSubSectionPosition',
        'description' => 'getDescription',
        'isVariationDimension' => 'getIsVariationDimension'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_SMALLTEXT = 'smalltext';
    const TYPE_HTMLTEXT = 'htmltext';
    const TYPE_TEXT = 'text';
    const TYPE_INTEGER = 'integer';
    const TYPE_DECIMAL = 'decimal';
    const TYPE_ENUM = 'enum';
    const TYPE_DATE = 'date';
    const TYPE_BOOLEAN = 'boolean';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SMALLTEXT,
            self::TYPE_HTMLTEXT,
            self::TYPE_TEXT,
            self::TYPE_INTEGER,
            self::TYPE_DECIMAL,
            self::TYPE_ENUM,
            self::TYPE_DATE,
            self::TYPE_BOOLEAN,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attributeId'] = isset($data['attributeId']) ? $data['attributeId'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['isMultipleAllowed'] = isset($data['isMultipleAllowed']) ? $data['isMultipleAllowed'] : false;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'smalltext';
        $this->container['enumValues'] = isset($data['enumValues']) ? $data['enumValues'] : null;
        $this->container['attributeValueValidation'] = isset($data['attributeValueValidation']) ? $data['attributeValueValidation'] : null;
        $this->container['conditionalMandatoryBy'] = isset($data['conditionalMandatoryBy']) ? $data['conditionalMandatoryBy'] : null;
        $this->container['conditionalOptionalBy'] = isset($data['conditionalOptionalBy']) ? $data['conditionalOptionalBy'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : false;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
        $this->container['sectionPosition'] = isset($data['sectionPosition']) ? $data['sectionPosition'] : 0;
        $this->container['subSection'] = isset($data['subSection']) ? $data['subSection'] : null;
        $this->container['subSectionPosition'] = isset($data['subSectionPosition']) ? $data['subSectionPosition'] : 0;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['isVariationDimension'] = isset($data['isVariationDimension']) ? $data['isVariationDimension'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['attributeId'] === null) {
            $invalidProperties[] = "'attributeId' can't be null";
        }
        if ((mb_strlen($this->container['attributeId']) > 128)) {
            $invalidProperties[] = "invalid value for 'attributeId', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['attributeId']) < 1)) {
            $invalidProperties[] = "invalid value for 'attributeId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['displayName'] === null) {
            $invalidProperties[] = "'displayName' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['attributeValueValidation']) && (mb_strlen($this->container['attributeValueValidation']) > 1024)) {
            $invalidProperties[] = "invalid value for 'attributeValueValidation', the character length must be smaller than or equal to 1024.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attributeId
     *
     * @return string
     */
    public function getAttributeId()
    {
        return $this->container['attributeId'];
    }

    /**
     * Sets attributeId
     *
     * @param string $attributeId AttributeId must be a category tree wide unique identifer.
     *
     * @return $this
     */
    public function setAttributeId($attributeId)
    {
        if ((mb_strlen($attributeId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $attributeId when calling Attribute., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($attributeId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $attributeId when calling Attribute., must be bigger than or equal to 1.');
        }

        $this->container['attributeId'] = $attributeId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Display name is used to display the attribute inside a User Interface.
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets isMultipleAllowed
     *
     * @return bool|null
     */
    public function getIsMultipleAllowed()
    {
        return $this->container['isMultipleAllowed'];
    }

    /**
     * Sets isMultipleAllowed
     *
     * @param bool|null $isMultipleAllowed Define if there is more than one value allowed for this attribute.
     *
     * @return $this
     */
    public function setIsMultipleAllowed($isMultipleAllowed)
    {
        $this->container['isMultipleAllowed'] = $isMultipleAllowed;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Attribute type decribe which kind of data is expecet for a particular attribute.  * Type **smalltext** is considerd a plain text any may not exceed more than 255 characters. * Type **text** is considerd plain text and may not exceed a maximum length more than 50.000 characters. * Type **htmltext** may be used for text where HTML Markup is allowed. The maximum lengh schould not exceed more than 50.000 characters. * Type **date** must follow [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard with Timezone. * Type **enum** may provide data with enumValues property
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets enumValues
     *
     * @return string[]|null
     */
    public function getEnumValues()
    {
        return $this->container['enumValues'];
    }

    /**
     * Sets enumValues
     *
     * @param string[]|null $enumValues If the attribte type equals to ENUM this propertie must be set.
     *
     * @return $this
     */
    public function setEnumValues($enumValues)
    {
        $this->container['enumValues'] = $enumValues;

        return $this;
    }

    /**
     * Gets attributeValueValidation
     *
     * @return string|null
     */
    public function getAttributeValueValidation()
    {
        return $this->container['attributeValueValidation'];
    }

    /**
     * Sets attributeValueValidation
     *
     * @param string|null $attributeValueValidation Regular expression to validate attribute value
     *
     * @return $this
     */
    public function setAttributeValueValidation($attributeValueValidation)
    {
        if (!is_null($attributeValueValidation) && (mb_strlen($attributeValueValidation) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $attributeValueValidation when calling Attribute., must be smaller than or equal to 1024.');
        }

        $this->container['attributeValueValidation'] = $attributeValueValidation;

        return $this;
    }

    /**
     * Gets conditionalMandatoryBy
     *
     * @return \JTL\SCX\Client\Channel\Model\AttributeConditionalMandatoryBy[]|null
     */
    public function getConditionalMandatoryBy()
    {
        return $this->container['conditionalMandatoryBy'];
    }

    /**
     * Sets conditionalMandatoryBy
     *
     * @param \JTL\SCX\Client\Channel\Model\AttributeConditionalMandatoryBy[]|null $conditionalMandatoryBy This property defines conditional mandatory settings
     *
     * @return $this
     */
    public function setConditionalMandatoryBy($conditionalMandatoryBy)
    {
        $this->container['conditionalMandatoryBy'] = $conditionalMandatoryBy;

        return $this;
    }

    /**
     * Gets conditionalOptionalBy
     *
     * @return \JTL\SCX\Client\Channel\Model\AttributeConditionalOptionalBy[]|null
     */
    public function getConditionalOptionalBy()
    {
        return $this->container['conditionalOptionalBy'];
    }

    /**
     * Sets conditionalOptionalBy
     *
     * @param \JTL\SCX\Client\Channel\Model\AttributeConditionalOptionalBy[]|null $conditionalOptionalBy This property defines conditional optional settings
     *
     * @return $this
     */
    public function setConditionalOptionalBy($conditionalOptionalBy)
    {
        $this->container['conditionalOptionalBy'] = $conditionalOptionalBy;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets section
     *
     * @return string|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param string|null $section Optinal attribute to assign a attribute to a specific section. A section can be used by a Seller Integration to show attributes grouped inside a identical section name.
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets sectionPosition
     *
     * @return int|null
     */
    public function getSectionPosition()
    {
        return $this->container['sectionPosition'];
    }

    /**
     * Sets sectionPosition
     *
     * @param int|null $sectionPosition Section position is used to sort attributes in descending order inside a section. This property may be used by a Seller Integration to determine display sequence in a User Interface.
     *
     * @return $this
     */
    public function setSectionPosition($sectionPosition)
    {
        $this->container['sectionPosition'] = $sectionPosition;

        return $this;
    }

    /**
     * Gets subSection
     *
     * @return string|null
     */
    public function getSubSection()
    {
        return $this->container['subSection'];
    }

    /**
     * Sets subSection
     *
     * @param string|null $subSection A sub section can be used to build a group of attributes inside a section.
     *
     * @return $this
     */
    public function setSubSection($subSection)
    {
        $this->container['subSection'] = $subSection;

        return $this;
    }

    /**
     * Gets subSectionPosition
     *
     * @return int|null
     */
    public function getSubSectionPosition()
    {
        return $this->container['subSectionPosition'];
    }

    /**
     * Sets subSectionPosition
     *
     * @param int|null $subSectionPosition Sub section position is used to sort attributes in descending order. This property may be used by a Seller Integration to determine display sequence in a User Interface inside identicy **section**s
     *
     * @return $this
     */
    public function setSubSectionPosition($subSectionPosition)
    {
        $this->container['subSectionPosition'] = $subSectionPosition;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Describe the purpose of an Attribute.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets isVariationDimension
     *
     * @return bool|null
     */
    public function getIsVariationDimension()
    {
        return $this->container['isVariationDimension'];
    }

    /**
     * Sets isVariationDimension
     *
     * @param bool|null $isVariationDimension isVariationDimension
     *
     * @return $this
     */
    public function setIsVariationDimension($isVariationDimension)
    {
        $this->container['isVariationDimension'] = $isVariationDimension;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


