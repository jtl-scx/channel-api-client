<?php
/**
 * CategoryAttribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * # Changelog  ## 2019-08-27  * add `GET /channel/events` call to retrive all channels avaiable seller events through SCX platform. (EA-1985)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;

use \ArrayAccess;
use \JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * CategoryAttribute Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CategoryAttribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CategoryAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attribute_id' => 'string',
        'display_name' => 'string',
        'is_multiple_allowed' => 'bool',
        'type' => 'string',
        'enum_values' => 'string[]',
        'attribute_value_validation' => 'string',
        'conditional_mandantory_by' => '\JTL\SCX\Client\Channel\Model\CategoryAttributeConditionalMandantoryBy',
        'conditional_optional_by' => '\JTL\SCX\Client\Channel\Model\CategoryAttributeConditionalOptionalBy',
        'required' => 'bool',
        'section' => 'string',
        'section_position' => 'int',
        'sub_section' => 'int',
        'sub_section_position' => 'int',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'attribute_id' => null,
        'display_name' => null,
        'is_multiple_allowed' => null,
        'type' => null,
        'enum_values' => null,
        'attribute_value_validation' => null,
        'conditional_mandantory_by' => null,
        'conditional_optional_by' => null,
        'required' => null,
        'section' => null,
        'section_position' => null,
        'sub_section' => null,
        'sub_section_position' => null,
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_id' => 'attributeId',
        'display_name' => 'displayName',
        'is_multiple_allowed' => 'isMultipleAllowed',
        'type' => 'type',
        'enum_values' => 'enumValues',
        'attribute_value_validation' => 'attributeValueValidation',
        'conditional_mandantory_by' => 'conditionalMandantoryBy',
        'conditional_optional_by' => 'conditionalOptionalBy',
        'required' => 'required',
        'section' => 'section',
        'section_position' => 'sectionPosition',
        'sub_section' => 'subSection',
        'sub_section_position' => 'subSectionPosition',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute_id' => 'setAttributeId',
        'display_name' => 'setDisplayName',
        'is_multiple_allowed' => 'setIsMultipleAllowed',
        'type' => 'setType',
        'enum_values' => 'setEnumValues',
        'attribute_value_validation' => 'setAttributeValueValidation',
        'conditional_mandantory_by' => 'setConditionalMandantoryBy',
        'conditional_optional_by' => 'setConditionalOptionalBy',
        'required' => 'setRequired',
        'section' => 'setSection',
        'section_position' => 'setSectionPosition',
        'sub_section' => 'setSubSection',
        'sub_section_position' => 'setSubSectionPosition',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute_id' => 'getAttributeId',
        'display_name' => 'getDisplayName',
        'is_multiple_allowed' => 'getIsMultipleAllowed',
        'type' => 'getType',
        'enum_values' => 'getEnumValues',
        'attribute_value_validation' => 'getAttributeValueValidation',
        'conditional_mandantory_by' => 'getConditionalMandantoryBy',
        'conditional_optional_by' => 'getConditionalOptionalBy',
        'required' => 'getRequired',
        'section' => 'getSection',
        'section_position' => 'getSectionPosition',
        'sub_section' => 'getSubSection',
        'sub_section_position' => 'getSubSectionPosition',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_SMALLTEXT = 'smalltext';
    const TYPE_HTMLTEXT = 'htmltext';
    const TYPE_TEXT = 'text';
    const TYPE_INTEGER = 'integer';
    const TYPE_DECIMAL = 'decimal';
    const TYPE_ENUM = 'enum';
    const TYPE_DATE = 'date';
    const TYPE_BOOLEAN = 'boolean';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SMALLTEXT,
            self::TYPE_HTMLTEXT,
            self::TYPE_TEXT,
            self::TYPE_INTEGER,
            self::TYPE_DECIMAL,
            self::TYPE_ENUM,
            self::TYPE_DATE,
            self::TYPE_BOOLEAN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute_id'] = isset($data['attribute_id']) ? $data['attribute_id'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['is_multiple_allowed'] = isset($data['is_multiple_allowed']) ? $data['is_multiple_allowed'] : false;
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'smalltext';
        $this->container['enum_values'] = isset($data['enum_values']) ? $data['enum_values'] : null;
        $this->container['attribute_value_validation'] = isset($data['attribute_value_validation']) ? $data['attribute_value_validation'] : null;
        $this->container['conditional_mandantory_by'] = isset($data['conditional_mandantory_by']) ? $data['conditional_mandantory_by'] : null;
        $this->container['conditional_optional_by'] = isset($data['conditional_optional_by']) ? $data['conditional_optional_by'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : false;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
        $this->container['section_position'] = isset($data['section_position']) ? $data['section_position'] : 0;
        $this->container['sub_section'] = isset($data['sub_section']) ? $data['sub_section'] : null;
        $this->container['sub_section_position'] = isset($data['sub_section_position']) ? $data['sub_section_position'] : 0;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['attribute_id'] === null) {
            $invalidProperties[] = "'attribute_id' can't be null";
        }
        if ((mb_strlen($this->container['attribute_id']) > 32)) {
            $invalidProperties[] = "invalid value for 'attribute_id', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['attribute_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'attribute_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['attribute_value_validation']) && (mb_strlen($this->container['attribute_value_validation']) > 1024)) {
            $invalidProperties[] = "invalid value for 'attribute_value_validation', the character length must be smaller than or equal to 1024.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attribute_id
     *
     * @return string
     */
    public function getAttributeId()
    {
        return $this->container['attribute_id'];
    }

    /**
     * Sets attribute_id
     *
     * @param string $attribute_id AttributeId must be a category tree wide unique identifer.
     *
     * @return $this
     */
    public function setAttributeId($attribute_id)
    {
        if ((mb_strlen($attribute_id) > 32)) {
            throw new \InvalidArgumentException('invalid length for $attribute_id when calling CategoryAttribute., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($attribute_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $attribute_id when calling CategoryAttribute., must be bigger than or equal to 1.');
        }

        $this->container['attribute_id'] = $attribute_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Display name is used to display the attribute inside a User Interface.
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets is_multiple_allowed
     *
     * @return bool|null
     */
    public function getIsMultipleAllowed()
    {
        return $this->container['is_multiple_allowed'];
    }

    /**
     * Sets is_multiple_allowed
     *
     * @param bool|null $is_multiple_allowed Define if there is more than one value allowed for this attribute.
     *
     * @return $this
     */
    public function setIsMultipleAllowed($is_multiple_allowed)
    {
        $this->container['is_multiple_allowed'] = $is_multiple_allowed;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Attribute type decribe which kind of data is expecet for a particular attribute.  * Type **smalltext** is considerd a plain text any may not exceed more than 255 characters. * Type **text** is considerd plain text and may not exceed a maximum length more than 50.000 characters. * Type **htmltext** may be used for text where HTML Markup is allowed. The maximum lengh schould not exceed more than 50.000 characters. * Type **date** must follow [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard with Timezone. * Type **enum** may provide data with enumValues property
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets enum_values
     *
     * @return string[]|null
     */
    public function getEnumValues()
    {
        return $this->container['enum_values'];
    }

    /**
     * Sets enum_values
     *
     * @param string[]|null $enum_values If the attribte type equals to ENUM this propertie must be set.
     *
     * @return $this
     */
    public function setEnumValues($enum_values)
    {
        $this->container['enum_values'] = $enum_values;

        return $this;
    }

    /**
     * Gets attribute_value_validation
     *
     * @return string|null
     */
    public function getAttributeValueValidation()
    {
        return $this->container['attribute_value_validation'];
    }

    /**
     * Sets attribute_value_validation
     *
     * @param string|null $attribute_value_validation Regular expression to validate attribute value
     *
     * @return $this
     */
    public function setAttributeValueValidation($attribute_value_validation)
    {
        if (!is_null($attribute_value_validation) && (mb_strlen($attribute_value_validation) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $attribute_value_validation when calling CategoryAttribute., must be smaller than or equal to 1024.');
        }

        $this->container['attribute_value_validation'] = $attribute_value_validation;

        return $this;
    }

    /**
     * Gets conditional_mandantory_by
     *
     * @return \JTL\SCX\Client\Channel\Model\CategoryAttributeConditionalMandantoryBy|null
     */
    public function getConditionalMandantoryBy()
    {
        return $this->container['conditional_mandantory_by'];
    }

    /**
     * Sets conditional_mandantory_by
     *
     * @param \JTL\SCX\Client\Channel\Model\CategoryAttributeConditionalMandantoryBy|null $conditional_mandantory_by conditional_mandantory_by
     *
     * @return $this
     */
    public function setConditionalMandantoryBy($conditional_mandantory_by)
    {
        $this->container['conditional_mandantory_by'] = $conditional_mandantory_by;

        return $this;
    }

    /**
     * Gets conditional_optional_by
     *
     * @return \JTL\SCX\Client\Channel\Model\CategoryAttributeConditionalOptionalBy|null
     */
    public function getConditionalOptionalBy()
    {
        return $this->container['conditional_optional_by'];
    }

    /**
     * Sets conditional_optional_by
     *
     * @param \JTL\SCX\Client\Channel\Model\CategoryAttributeConditionalOptionalBy|null $conditional_optional_by conditional_optional_by
     *
     * @return $this
     */
    public function setConditionalOptionalBy($conditional_optional_by)
    {
        $this->container['conditional_optional_by'] = $conditional_optional_by;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets section
     *
     * @return string|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param string|null $section Optinal attribute to assign a attribute to a specific section. A section can be used by a Seller Integration to show attributes grouped inside a identical section name.
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets section_position
     *
     * @return int|null
     */
    public function getSectionPosition()
    {
        return $this->container['section_position'];
    }

    /**
     * Sets section_position
     *
     * @param int|null $section_position Section position is used to sort attributes in descending order inside a section. This property may be used by a Seller Integration to determine display sequence in a User Interface.
     *
     * @return $this
     */
    public function setSectionPosition($section_position)
    {
        $this->container['section_position'] = $section_position;

        return $this;
    }

    /**
     * Gets sub_section
     *
     * @return int|null
     */
    public function getSubSection()
    {
        return $this->container['sub_section'];
    }

    /**
     * Sets sub_section
     *
     * @param int|null $sub_section A sub section can be used to build a group of attributes inside a section.
     *
     * @return $this
     */
    public function setSubSection($sub_section)
    {
        $this->container['sub_section'] = $sub_section;

        return $this;
    }

    /**
     * Gets sub_section_position
     *
     * @return int|null
     */
    public function getSubSectionPosition()
    {
        return $this->container['sub_section_position'];
    }

    /**
     * Sets sub_section_position
     *
     * @param int|null $sub_section_position Sub section position is used to sort attributes in descending order. This property may be used by a Seller Integration to determine display sequence in a User Interface inside identicy **section**s
     *
     * @return $this
     */
    public function setSubSectionPosition($sub_section_position)
    {
        $this->container['sub_section_position'] = $sub_section_position;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Describe the purpose of an Attribute.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


