<?php
/**
 * SalesChannelData
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;

use \ArrayAccess;
use \JTL\SCX\Client\Channel\ObjectSerializer;

/**
 * SalesChannelData Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SalesChannelData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SalesChannelData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => 'string',
        'currency' => 'string',
        'marketplaceList' => 'string[]',
        'supportedLanguages' => 'string[]',
        'displayName' => 'string',
        'website' => 'string',
        'supportContact' => 'string',
        'vendor' => 'string',
        'signUpUrl' => 'string',
        'featureList' => '\JTL\SCX\Client\Channel\Model\ChannelUpdateFeatureList'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'currency' => null,
        'marketplaceList' => null,
        'supportedLanguages' => null,
        'displayName' => null,
        'website' => 'uri',
        'supportContact' => 'email',
        'vendor' => null,
        'signUpUrl' => null,
        'featureList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'currency' => 'currency',
        'marketplaceList' => 'marketplaceList',
        'supportedLanguages' => 'supportedLanguages',
        'displayName' => 'displayName',
        'website' => 'website',
        'supportContact' => 'supportContact',
        'vendor' => 'vendor',
        'signUpUrl' => 'signUpUrl',
        'featureList' => 'featureList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'currency' => 'setCurrency',
        'marketplaceList' => 'setMarketplaceList',
        'supportedLanguages' => 'setSupportedLanguages',
        'displayName' => 'setDisplayName',
        'website' => 'setWebsite',
        'supportContact' => 'setSupportContact',
        'vendor' => 'setVendor',
        'signUpUrl' => 'setSignUpUrl',
        'featureList' => 'setFeatureList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'currency' => 'getCurrency',
        'marketplaceList' => 'getMarketplaceList',
        'supportedLanguages' => 'getSupportedLanguages',
        'displayName' => 'getDisplayName',
        'website' => 'getWebsite',
        'supportContact' => 'getSupportContact',
        'vendor' => 'getVendor',
        'signUpUrl' => 'getSignUpUrl',
        'featureList' => 'getFeatureList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['marketplaceList'] = $data['marketplaceList'] ?? null;
        $this->container['supportedLanguages'] = $data['supportedLanguages'] ?? null;
        $this->container['displayName'] = $data['displayName'] ?? null;
        $this->container['website'] = $data['website'] ?? null;
        $this->container['supportContact'] = $data['supportContact'] ?? null;
        $this->container['vendor'] = $data['vendor'] ?? null;
        $this->container['signUpUrl'] = $data['signUpUrl'] ?? null;
        $this->container['featureList'] = $data['featureList'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if (!preg_match("/^\\w{5,15}$/", $this->container['channel'])) {
            $invalidProperties[] = "invalid value for 'channel', must be conform to the pattern /^\\w{5,15}$/.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['displayName'] === null) {
            $invalidProperties[] = "'displayName' can't be null";
        }
        if ($this->container['website'] === null) {
            $invalidProperties[] = "'website' can't be null";
        }
        if ($this->container['supportContact'] === null) {
            $invalidProperties[] = "'supportContact' can't be null";
        }
        if ($this->container['vendor'] === null) {
            $invalidProperties[] = "'vendor' can't be null";
        }
        if ($this->container['signUpUrl'] === null) {
            $invalidProperties[] = "'signUpUrl' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel This is the unqiue Channel name.
     *
     * @return self
     */
    public function setChannel($channel)
    {

        if ((!preg_match("/^\\w{5,15}$/", $channel))) {
            throw new \InvalidArgumentException("invalid value for $channel when calling SalesChannelData., must conform to the pattern /^\\w{5,15}$/.");
        }

        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency which are supported by the Channel. According to ISO-4217.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets marketplaceList
     *
     * @return string[]|null
     */
    public function getMarketplaceList()
    {
        return $this->container['marketplaceList'];
    }

    /**
     * Sets marketplaceList
     *
     * @param string[]|null $marketplaceList Country ISO code or a list of ISO codes which geografic market is supported.
     *
     * @return self
     */
    public function setMarketplaceList($marketplaceList)
    {
        $this->container['marketplaceList'] = $marketplaceList;

        return $this;
    }

    /**
     * Gets supportedLanguages
     *
     * @return string[]|null
     */
    public function getSupportedLanguages()
    {
        return $this->container['supportedLanguages'];
    }

    /**
     * Sets supportedLanguages
     *
     * @param string[]|null $supportedLanguages Laguage ISO code or a list of ISO codes which languages ars supported. According to ISO 639-1.
     *
     * @return self
     */
    public function setSupportedLanguages($supportedLanguages)
    {
        $this->container['supportedLanguages'] = $supportedLanguages;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Channel Name
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets supportContact
     *
     * @return string
     */
    public function getSupportContact()
    {
        return $this->container['supportContact'];
    }

    /**
     * Sets supportContact
     *
     * @param string $supportContact supportContact
     *
     * @return self
     */
    public function setSupportContact($supportContact)
    {
        $this->container['supportContact'] = $supportContact;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor vendor
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets signUpUrl
     *
     * @return string
     */
    public function getSignUpUrl()
    {
        return $this->container['signUpUrl'];
    }

    /**
     * Sets signUpUrl
     *
     * @param string $signUpUrl The SignUp URL ist required for register new Sellers with the SCX Channel API. SCX will create a Sign-Up ID to link a seller with SCX.
     *
     * @return self
     */
    public function setSignUpUrl($signUpUrl)
    {
        $this->container['signUpUrl'] = $signUpUrl;

        return $this;
    }

    /**
     * Gets featureList
     *
     * @return \JTL\SCX\Client\Channel\Model\ChannelUpdateFeatureList|null
     */
    public function getFeatureList()
    {
        return $this->container['featureList'];
    }

    /**
     * Sets featureList
     *
     * @param \JTL\SCX\Client\Channel\Model\ChannelUpdateFeatureList|null $featureList featureList
     *
     * @return self
     */
    public function setFeatureList($featureList)
    {
        $this->container['featureList'] = $featureList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


