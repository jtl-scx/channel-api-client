<?php
/**
 * SellerEventTypeList
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JTL\SCX\Client\Channel\Model;
use JTL\SCX\Client\Channel\EnumInterface;

/**
 * SellerEventTypeList Class Doc Comment
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SellerEventTypeList implements EnumInterface
{
    private $value;

    /**
     * Possible values of this enum
     */
    const SYSTEMTEST = 'System:Test';
    const SYSTEMNOTIFICATION = 'System:Notification';
    const SELLERORDER_ACCEPTED = 'Seller:Order.Accepted';
    const SELLERORDER_SHIPPING = 'Seller:Order.Shipping';
    const SELLERORDER_PAYMENT = 'Seller:Order.Payment';
    const SELLERORDER_CANCELLATION_REQUEST = 'Seller:Order.Cancellation.Request';
    const SELLERORDER_CANCELLATION_ACCEPTED = 'Seller:Order.Cancellation.Accepted';
    const SELLERORDER_CANCELLATION_DENIED = 'Seller:Order.Cancellation.Denied';
    const SELLERORDER_REFUND = 'Seller:Order.Refund';
    const SELLERORDER_INVOICE = 'Seller:Order.Invoice';
    const SELLERORDER_RETURN_RECEIVED = 'Seller:Order.ReturnReceived';
    const SELLEROFFER_NEW = 'Seller:Offer.New';
    const SELLEROFFER_UPDATE = 'Seller:Offer.Update';
    const SELLEROFFER_END = 'Seller:Offer.End';
    const SELLEROFFER_STOCK_UPDATE = 'Seller:Offer.StockUpdate';
    const SELLEROFFER_PRICE_UPDATE = 'Seller:Offer.PriceUpdate';
    const SELLERREPORT_REQUEST = 'Seller:Report.Request';
    const SELLERCHANNEL_UNLINKED = 'Seller:Channel.Unlinked';
    const SELLERMETA_SELLER_ATTRIBUTES_UPDATE_REQUEST = 'Seller:Meta.SellerAttributesUpdateRequest';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::SYSTEMTEST,
            self::SYSTEMNOTIFICATION,
            self::SELLERORDER_ACCEPTED,
            self::SELLERORDER_SHIPPING,
            self::SELLERORDER_PAYMENT,
            self::SELLERORDER_CANCELLATION_REQUEST,
            self::SELLERORDER_CANCELLATION_ACCEPTED,
            self::SELLERORDER_CANCELLATION_DENIED,
            self::SELLERORDER_REFUND,
            self::SELLERORDER_INVOICE,
            self::SELLERORDER_RETURN_RECEIVED,
            self::SELLEROFFER_NEW,
            self::SELLEROFFER_UPDATE,
            self::SELLEROFFER_END,
            self::SELLEROFFER_STOCK_UPDATE,
            self::SELLEROFFER_PRICE_UPDATE,
            self::SELLERREPORT_REQUEST,
            self::SELLERCHANNEL_UNLINKED,
            self::SELLERMETA_SELLER_ATTRIBUTES_UPDATE_REQUEST,
        ];
    }

    
    public static function SYSTEMTEST(): SellerEventTypeList
    {
        return new self('System:Test');
    }
    
    public static function SYSTEMNOTIFICATION(): SellerEventTypeList
    {
        return new self('System:Notification');
    }
    
    public static function SELLERORDER_ACCEPTED(): SellerEventTypeList
    {
        return new self('Seller:Order.Accepted');
    }
    
    public static function SELLERORDER_SHIPPING(): SellerEventTypeList
    {
        return new self('Seller:Order.Shipping');
    }
    
    public static function SELLERORDER_PAYMENT(): SellerEventTypeList
    {
        return new self('Seller:Order.Payment');
    }
    
    public static function SELLERORDER_CANCELLATION_REQUEST(): SellerEventTypeList
    {
        return new self('Seller:Order.Cancellation.Request');
    }
    
    public static function SELLERORDER_CANCELLATION_ACCEPTED(): SellerEventTypeList
    {
        return new self('Seller:Order.Cancellation.Accepted');
    }
    
    public static function SELLERORDER_CANCELLATION_DENIED(): SellerEventTypeList
    {
        return new self('Seller:Order.Cancellation.Denied');
    }
    
    public static function SELLERORDER_REFUND(): SellerEventTypeList
    {
        return new self('Seller:Order.Refund');
    }
    
    public static function SELLERORDER_INVOICE(): SellerEventTypeList
    {
        return new self('Seller:Order.Invoice');
    }
    
    public static function SELLERORDER_RETURN_RECEIVED(): SellerEventTypeList
    {
        return new self('Seller:Order.ReturnReceived');
    }
    
    public static function SELLEROFFER_NEW(): SellerEventTypeList
    {
        return new self('Seller:Offer.New');
    }
    
    public static function SELLEROFFER_UPDATE(): SellerEventTypeList
    {
        return new self('Seller:Offer.Update');
    }
    
    public static function SELLEROFFER_END(): SellerEventTypeList
    {
        return new self('Seller:Offer.End');
    }
    
    public static function SELLEROFFER_STOCK_UPDATE(): SellerEventTypeList
    {
        return new self('Seller:Offer.StockUpdate');
    }
    
    public static function SELLEROFFER_PRICE_UPDATE(): SellerEventTypeList
    {
        return new self('Seller:Offer.PriceUpdate');
    }
    
    public static function SELLERREPORT_REQUEST(): SellerEventTypeList
    {
        return new self('Seller:Report.Request');
    }
    
    public static function SELLERCHANNEL_UNLINKED(): SellerEventTypeList
    {
        return new self('Seller:Channel.Unlinked');
    }
    
    public static function SELLERMETA_SELLER_ATTRIBUTES_UPDATE_REQUEST(): SellerEventTypeList
    {
        return new self('Seller:Meta.SellerAttributesUpdateRequest');
    }
    

    public function __construct($value)
    {
        $this->value = $value;
    }

    public function getValue()
    {
        return $this->value;
    }
}


