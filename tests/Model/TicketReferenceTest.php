<?php
/**
 * TicketReferenceTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Client\Channel\Model;

use JTL\SCX\Client\Channel\AbstractApiModelTest;

/**
 * TicketReferenceTest Class Doc Comment
 *
 * @category    Class
 * @description TicketReference
 * @package     JTL\SCX\Client\Channel
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Client\Channel\Model\TicketReference
 */
class TicketReferenceTest extends AbstractApiModelTest
{

    /**
     * Test allowed values for type
     * @test
     */
    public function it_has_correct_allowed_values_for_type(): void
    {
        $allowed = [
            'OFFER','CHANNELOFFER','ORDERID','ORDERITEMID',
        ];

        $sut = new TicketReference();
        $this->assertMethodExists($sut, 'getTypeAllowableValues');
        $this->assertEquals($allowed, $sut->getTypeAllowableValues());
    }
    /**
     * @return array
     * @dataProvider
     */
    public function expectedInterface(): array
    {
        return [
            'assert property Type' => [
                'type',
                'string',
                'getType',
                'setType'
            ],
            'assert property Id' => [
                'id',
                'string',
                'getId',
                'setId'
            ],
        ];
    }

    /**
     * @test
     * @dataProvider expectedInterface
     */
    public function it_has_expected_interface(string $property, string $type, string $expectedGetter, string $expectedSetter): void
    {
        $sample = $this->buildSampleForDataType($type);
        $sut = new TicketReference([$property => $sample]);

        $this->assertMethodExists($sut, $expectedGetter);
        $this->assertSame($sample, $sut->$expectedGetter());

        $this->assertArrayHasKey($property, $sut);
        $this->assertSame($sample, $sut[$property]);

        $newSample = $this->buildSampleForDataType($type);
        $this->assertMethodExists($sut, $expectedSetter);
        $sut->$expectedSetter($newSample);
        $this->assertSame($newSample, $sut[$property]);
    }

}
