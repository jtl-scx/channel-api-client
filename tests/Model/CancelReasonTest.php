<?php
/**
 * CancelReasonTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Client\Channel\Model;

use PHPUnit\Framework\TestCase;

/**
 * CancelReasonTest Class Doc Comment
 *
 * @category    Class
 * @description * BUYER_CANCELLED: the buyer cancelled the order. * UNDELIVERABLE_TO_SHIPPING_ADDRESS: Could not deliver to the address given by the buyer. * UNDELIVERABLE_BY_CARRIER: Carrier do not ship to the buyerss location. * OUT_OF_STOCK: The item is out of stock, for example because you are temporarily or permenantly sold out. * DELAYED_INVENTORY: The item is not in your inventory and there is a delay in delivery by the supplier. * PRICING_ERROR: The price on the connected marketplace was incorrect. * OTHER: Well, objvoiusly there is some reason missing in this list.
 * @package     JTL\SCX\Client\Channel
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Client\Channel\Model\CancelReason
 */
class CancelReasonTest extends TestCase
{

    /**
     * Test Enum Value "BUYER_CANCELLED"
     * @test
     */
    public function is_a_const_BUYER_CANCELLED(): void
    {
        self::assertEquals('BUYER_CANCELLED', CancelReason::BUYER_CANCELLED);
        $sut = new CancelReason('BUYER_CANCELLED');
        self::assertEquals('BUYER_CANCELLED', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "BUYER_CANCELLED"
     * @test
     */
    public function it_can_be_constructed_forBUYER_CANCELLED(): void
    {
        $sut = CancelReason::BUYER_CANCELLED();
        self::assertInstanceOf(CancelReason::class, $sut);
    }
    /**
     * Test Enum Value "UNDELIVERABLE_TO_SHIPPING_ADDRESS"
     * @test
     */
    public function is_a_const_UNDELIVERABLE_TO_SHIPPING_ADDRESS(): void
    {
        self::assertEquals('UNDELIVERABLE_TO_SHIPPING_ADDRESS', CancelReason::UNDELIVERABLE_TO_SHIPPING_ADDRESS);
        $sut = new CancelReason('UNDELIVERABLE_TO_SHIPPING_ADDRESS');
        self::assertEquals('UNDELIVERABLE_TO_SHIPPING_ADDRESS', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "UNDELIVERABLE_TO_SHIPPING_ADDRESS"
     * @test
     */
    public function it_can_be_constructed_forUNDELIVERABLE_TO_SHIPPING_ADDRESS(): void
    {
        $sut = CancelReason::UNDELIVERABLE_TO_SHIPPING_ADDRESS();
        self::assertInstanceOf(CancelReason::class, $sut);
    }
    /**
     * Test Enum Value "UNDELIVERABLE_BY_CARRIER"
     * @test
     */
    public function is_a_const_UNDELIVERABLE_BY_CARRIER(): void
    {
        self::assertEquals('UNDELIVERABLE_BY_CARRIER', CancelReason::UNDELIVERABLE_BY_CARRIER);
        $sut = new CancelReason('UNDELIVERABLE_BY_CARRIER');
        self::assertEquals('UNDELIVERABLE_BY_CARRIER', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "UNDELIVERABLE_BY_CARRIER"
     * @test
     */
    public function it_can_be_constructed_forUNDELIVERABLE_BY_CARRIER(): void
    {
        $sut = CancelReason::UNDELIVERABLE_BY_CARRIER();
        self::assertInstanceOf(CancelReason::class, $sut);
    }
    /**
     * Test Enum Value "OUT_OF_STOCK"
     * @test
     */
    public function is_a_const_OUT_OF_STOCK(): void
    {
        self::assertEquals('OUT_OF_STOCK', CancelReason::OUT_OF_STOCK);
        $sut = new CancelReason('OUT_OF_STOCK');
        self::assertEquals('OUT_OF_STOCK', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "OUT_OF_STOCK"
     * @test
     */
    public function it_can_be_constructed_forOUT_OF_STOCK(): void
    {
        $sut = CancelReason::OUT_OF_STOCK();
        self::assertInstanceOf(CancelReason::class, $sut);
    }
    /**
     * Test Enum Value "DELAYED_INVENTORY"
     * @test
     */
    public function is_a_const_DELAYED_INVENTORY(): void
    {
        self::assertEquals('DELAYED_INVENTORY', CancelReason::DELAYED_INVENTORY);
        $sut = new CancelReason('DELAYED_INVENTORY');
        self::assertEquals('DELAYED_INVENTORY', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "DELAYED_INVENTORY"
     * @test
     */
    public function it_can_be_constructed_forDELAYED_INVENTORY(): void
    {
        $sut = CancelReason::DELAYED_INVENTORY();
        self::assertInstanceOf(CancelReason::class, $sut);
    }
    /**
     * Test Enum Value "PRICING_ERROR"
     * @test
     */
    public function is_a_const_PRICING_ERROR(): void
    {
        self::assertEquals('PRICING_ERROR', CancelReason::PRICING_ERROR);
        $sut = new CancelReason('PRICING_ERROR');
        self::assertEquals('PRICING_ERROR', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "PRICING_ERROR"
     * @test
     */
    public function it_can_be_constructed_forPRICING_ERROR(): void
    {
        $sut = CancelReason::PRICING_ERROR();
        self::assertInstanceOf(CancelReason::class, $sut);
    }
    /**
     * Test Enum Value "OTHER"
     * @test
     */
    public function is_a_const_OTHER(): void
    {
        self::assertEquals('OTHER', CancelReason::OTHER);
        $sut = new CancelReason('OTHER');
        self::assertEquals('OTHER', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "OTHER"
     * @test
     */
    public function it_can_be_constructed_forOTHER(): void
    {
        $sut = CancelReason::OTHER();
        self::assertInstanceOf(CancelReason::class, $sut);
    }

    /**
     * Test allowed values from Enum
     * @test
     */
    public function it_has_correct_set_of_allowed_values(): void
    {
        $allowed = [
            CancelReason::BUYER_CANCELLED,
            CancelReason::UNDELIVERABLE_TO_SHIPPING_ADDRESS,
            CancelReason::UNDELIVERABLE_BY_CARRIER,
            CancelReason::OUT_OF_STOCK,
            CancelReason::DELAYED_INVENTORY,
            CancelReason::PRICING_ERROR,
            CancelReason::OTHER,
        ];
        self::assertEquals($allowed, CancelReason::getAllowableEnumValues());
    }

    private function assertMethodExists(CancelReason $sut, string $methodName): void
    {
        try {
            $_ = (new \ReflectionClass($sut))->getMethod($methodName);
        } catch (\ReflectionException $e) {
            self::fail("No public method {$methodName} found in " . get_class($sut));
        }
        $this->assertTrue(true);
    }

    private function buildSampleForDataType(string $dataType)
    {
        $isArray = substr($dataType, -2) === '[]';

        if ($isArray) {
            $dataType = substr($dataType, 0, strlen($dataType)-2);
        }

        $isMap = substr($dataType, 0, 3) === 'map';
        if ($isMap) {
            $isArray = true;
            $dataType = 'string';
        }

        switch ($dataType) {
            case '\SplFileObject':
                $sampleData = new \SplFileObject('php://memory');
                break;
            case 'object':
                $sampleData = $this->createStub('\stdClass');
                break;
            case 'integer':
            case 'int':
                $sampleData = random_int(100, 10000);
                break;
            case 'double':
            case 'float':
                $sampleData = random_int(100, 10000)/pi();
                break;
            case 'bool':
            case 'boolean':
                $sampleData = (bool)random_int(0, 1);
                break;
            case 'string':
            case 'text':
                $sampleData = uniqid('a_string');
                break;
            default:
                $sampleData = $this->createStub($dataType);
        }

        if ($isArray) {
            $sampleData = [$sampleData];
        }
        return $sampleData;
    }
}
