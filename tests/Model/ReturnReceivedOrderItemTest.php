<?php
/**
 * ReturnReceivedOrderItemTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Client\Channel\Model;

use PHPUnit\Framework\TestCase;

/**
 * ReturnReceivedOrderItemTest Class Doc Comment
 *
 * @category    Class
 * @description ReturnReceivedOrderItem
 * @package     JTL\SCX\Client\Channel
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Client\Channel\Model\ReturnReceivedOrderItem
 */
class ReturnReceivedOrderItemTest extends TestCase
{



    /**
     * Test attribute "orderItemId"
     * @test
     */
    public function it_has_a_OrderItemId(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new ReturnReceivedOrderItem(['orderItemId' => $sample]);

        $this->assertMethodExists($sut, 'getOrderItemId');
        $this->assertSame($sample, $sut->getOrderItemId());

        $this->assertArrayHasKey('orderItemId', $sut);
        $this->assertSame($sample, $sut['orderItemId']);

    }

    /**
     * Test attribute "orderItemId"
     * @test
     */
    public function it_has_a_setter_for_OrderItemId(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new ReturnReceivedOrderItem();

        $this->assertMethodExists($sut, 'setOrderItemId');
        $sut->setOrderItemId($sample);
        $this->assertSame($sample, $sut['orderItemId']);
    }


    /**
     * Test attribute "quantity"
     * @test
     */
    public function it_has_a_Quantity(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new ReturnReceivedOrderItem(['quantity' => $sample]);

        $this->assertMethodExists($sut, 'getQuantity');
        $this->assertSame($sample, $sut->getQuantity());

        $this->assertArrayHasKey('quantity', $sut);
        $this->assertSame($sample, $sut['quantity']);

    }

    /**
     * Test attribute "quantity"
     * @test
     */
    public function it_has_a_setter_for_Quantity(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new ReturnReceivedOrderItem();

        $this->assertMethodExists($sut, 'setQuantity');
        $sut->setQuantity($sample);
        $this->assertSame($sample, $sut['quantity']);
    }


    /**
     * Test attribute "returnReason"
     * @test
     */
    public function it_has_a_ReturnReason(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\ReturnReason');
        $sut = new ReturnReceivedOrderItem(['returnReason' => $sample]);

        $this->assertMethodExists($sut, 'getReturnReason');
        $this->assertSame($sample, $sut->getReturnReason());

        $this->assertArrayHasKey('returnReason', $sut);
        $this->assertSame($sample, $sut['returnReason']);

    }

    /**
     * Test attribute "returnReason"
     * @test
     */
    public function it_has_a_setter_for_ReturnReason(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\ReturnReason');
        $sut = new ReturnReceivedOrderItem();

        $this->assertMethodExists($sut, 'setReturnReason');
        $sut->setReturnReason($sample);
        $this->assertSame($sample, $sut['returnReason']);
    }


    /**
     * Test attribute "note"
     * @test
     */
    public function it_has_a_Note(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new ReturnReceivedOrderItem(['note' => $sample]);

        $this->assertMethodExists($sut, 'getNote');
        $this->assertSame($sample, $sut->getNote());

        $this->assertArrayHasKey('note', $sut);
        $this->assertSame($sample, $sut['note']);

    }

    /**
     * Test attribute "note"
     * @test
     */
    public function it_has_a_setter_for_Note(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new ReturnReceivedOrderItem();

        $this->assertMethodExists($sut, 'setNote');
        $sut->setNote($sample);
        $this->assertSame($sample, $sut['note']);
    }


    /**
     * Test attribute "condition"
     * @test
     */
    public function it_has_a_Condition(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\Condition');
        $sut = new ReturnReceivedOrderItem(['condition' => $sample]);

        $this->assertMethodExists($sut, 'getCondition');
        $this->assertSame($sample, $sut->getCondition());

        $this->assertArrayHasKey('condition', $sut);
        $this->assertSame($sample, $sut['condition']);

    }

    /**
     * Test attribute "condition"
     * @test
     */
    public function it_has_a_setter_for_Condition(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\Condition');
        $sut = new ReturnReceivedOrderItem();

        $this->assertMethodExists($sut, 'setCondition');
        $sut->setCondition($sample);
        $this->assertSame($sample, $sut['condition']);
    }


    /**
     * Test attribute "acceptReturn"
     * @test
     */
    public function it_has_a_AcceptReturn(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ReturnReceivedOrderItem(['acceptReturn' => $sample]);

        $this->assertMethodExists($sut, 'getAcceptReturn');
        $this->assertSame($sample, $sut->getAcceptReturn());

        $this->assertArrayHasKey('acceptReturn', $sut);
        $this->assertSame($sample, $sut['acceptReturn']);

    }

    /**
     * Test attribute "acceptReturn"
     * @test
     */
    public function it_has_a_setter_for_AcceptReturn(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ReturnReceivedOrderItem();

        $this->assertMethodExists($sut, 'setAcceptReturn');
        $sut->setAcceptReturn($sample);
        $this->assertSame($sample, $sut['acceptReturn']);
    }


    /**
     * Test attribute "requireReturnShipping"
     * @test
     */
    public function it_has_a_RequireReturnShipping(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ReturnReceivedOrderItem(['requireReturnShipping' => $sample]);

        $this->assertMethodExists($sut, 'getRequireReturnShipping');
        $this->assertSame($sample, $sut->getRequireReturnShipping());

        $this->assertArrayHasKey('requireReturnShipping', $sut);
        $this->assertSame($sample, $sut['requireReturnShipping']);

    }

    /**
     * Test attribute "requireReturnShipping"
     * @test
     */
    public function it_has_a_setter_for_RequireReturnShipping(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ReturnReceivedOrderItem();

        $this->assertMethodExists($sut, 'setRequireReturnShipping');
        $sut->setRequireReturnShipping($sample);
        $this->assertSame($sample, $sut['requireReturnShipping']);
    }

    private function assertMethodExists(ReturnReceivedOrderItem $sut, string $methodName): void
    {
        try {
            $_ = (new \ReflectionClass($sut))->getMethod($methodName);
        } catch (\ReflectionException $e) {
            self::fail("No public method {$methodName} found in " . get_class($sut));
        }
        $this->assertTrue(true);
    }

    private function buildSampleForDataType(string $dataType)
    {
        $isArray = substr($dataType, -2) === '[]';

        if ($isArray) {
            $dataType = substr($dataType, 0, strlen($dataType)-2);
        }

        $isMap = substr($dataType, 0, 3) === 'map';
        if ($isMap) {
            $isArray = true;
            $dataType = 'string';
        }

        switch ($dataType) {
            case '\SplFileObject':
                $sampleData = new \SplFileObject('php://memory');
                break;
            case 'object':
                $sampleData = $this->createStub('\stdClass');
                break;
            case 'integer':
            case 'int':
                $sampleData = random_int(100, 10000);
                break;
            case 'double':
            case 'float':
                $sampleData = random_int(100, 10000)/pi();
                break;
            case 'bool':
            case 'boolean':
                $sampleData = (bool)random_int(0, 1);
                break;
            case 'string':
            case 'text':
                $sampleData = uniqid('a_string');
                break;
            default:
                $sampleData = $this->createStub($dataType);
        }

        if ($isArray) {
            $sampleData = [$sampleData];
        }
        return $sampleData;
    }
}
