<?php
/**
 * AddressTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Client\Channel\Model;

use PHPUnit\Framework\TestCase;

/**
 * AddressTest Class Doc Comment
 *
 * @category    Class
 * @description Address
 * @package     JTL\SCX\Client\Channel
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Client\Channel\Model\Address
 */
class AddressTest extends TestCase
{



    /**
     * Test attribute "firstName"
     * @test
     */
    public function it_has_a_FirstName(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['firstName' => $sample]);

        $this->assertMethodExists($sut, 'getFirstName');
        $this->assertSame($sample, $sut->getFirstName());

        $this->assertArrayHasKey('firstName', $sut);
        $this->assertSame($sample, $sut['firstName']);

    }

    /**
     * Test attribute "firstName"
     * @test
     */
    public function it_has_a_setter_for_FirstName(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setFirstName');
        $sut->setFirstName($sample);
        $this->assertSame($sample, $sut['firstName']);
    }


    /**
     * Test attribute "lastName"
     * @test
     */
    public function it_has_a_LastName(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['lastName' => $sample]);

        $this->assertMethodExists($sut, 'getLastName');
        $this->assertSame($sample, $sut->getLastName());

        $this->assertArrayHasKey('lastName', $sut);
        $this->assertSame($sample, $sut['lastName']);

    }

    /**
     * Test attribute "lastName"
     * @test
     */
    public function it_has_a_setter_for_LastName(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setLastName');
        $sut->setLastName($sample);
        $this->assertSame($sample, $sut['lastName']);
    }

    /**
     * Test allowed values for gender
     * @test
     */
    public function it_has_correct_allowed_values_for_gender(): void
    {
        $allowed = [
            'male','female','diverse',
        ];

        $sut = new Address();
        $this->assertMethodExists($sut, 'getGenderAllowableValues');
        $this->assertEquals($allowed, $sut->getGenderAllowableValues());
    }

    /**
     * Test attribute "gender"
     * @test
     */
    public function it_has_a_Gender(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['gender' => $sample]);

        $this->assertMethodExists($sut, 'getGender');
        $this->assertSame($sample, $sut->getGender());

        $this->assertArrayHasKey('gender', $sut);
        $this->assertSame($sample, $sut['gender']);

    }

    /**
     * Test attribute "gender"
     * @test
     */
    public function it_has_a_setter_for_Gender(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setGender');
        $sut->setGender($sample);
        $this->assertSame($sample, $sut['gender']);
    }


    /**
     * Test attribute "companyName"
     * @test
     */
    public function it_has_a_CompanyName(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['companyName' => $sample]);

        $this->assertMethodExists($sut, 'getCompanyName');
        $this->assertSame($sample, $sut->getCompanyName());

        $this->assertArrayHasKey('companyName', $sut);
        $this->assertSame($sample, $sut['companyName']);

    }

    /**
     * Test attribute "companyName"
     * @test
     */
    public function it_has_a_setter_for_CompanyName(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setCompanyName');
        $sut->setCompanyName($sample);
        $this->assertSame($sample, $sut['companyName']);
    }


    /**
     * Test attribute "street"
     * @test
     */
    public function it_has_a_Street(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['street' => $sample]);

        $this->assertMethodExists($sut, 'getStreet');
        $this->assertSame($sample, $sut->getStreet());

        $this->assertArrayHasKey('street', $sut);
        $this->assertSame($sample, $sut['street']);

    }

    /**
     * Test attribute "street"
     * @test
     */
    public function it_has_a_setter_for_Street(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setStreet');
        $sut->setStreet($sample);
        $this->assertSame($sample, $sut['street']);
    }


    /**
     * Test attribute "houseNumber"
     * @test
     */
    public function it_has_a_HouseNumber(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['houseNumber' => $sample]);

        $this->assertMethodExists($sut, 'getHouseNumber');
        $this->assertSame($sample, $sut->getHouseNumber());

        $this->assertArrayHasKey('houseNumber', $sut);
        $this->assertSame($sample, $sut['houseNumber']);

    }

    /**
     * Test attribute "houseNumber"
     * @test
     */
    public function it_has_a_setter_for_HouseNumber(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setHouseNumber');
        $sut->setHouseNumber($sample);
        $this->assertSame($sample, $sut['houseNumber']);
    }


    /**
     * Test attribute "addition"
     * @test
     */
    public function it_has_a_Addition(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['addition' => $sample]);

        $this->assertMethodExists($sut, 'getAddition');
        $this->assertSame($sample, $sut->getAddition());

        $this->assertArrayHasKey('addition', $sut);
        $this->assertSame($sample, $sut['addition']);

    }

    /**
     * Test attribute "addition"
     * @test
     */
    public function it_has_a_setter_for_Addition(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setAddition');
        $sut->setAddition($sample);
        $this->assertSame($sample, $sut['addition']);
    }


    /**
     * Test attribute "postcode"
     * @test
     */
    public function it_has_a_Postcode(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['postcode' => $sample]);

        $this->assertMethodExists($sut, 'getPostcode');
        $this->assertSame($sample, $sut->getPostcode());

        $this->assertArrayHasKey('postcode', $sut);
        $this->assertSame($sample, $sut['postcode']);

    }

    /**
     * Test attribute "postcode"
     * @test
     */
    public function it_has_a_setter_for_Postcode(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setPostcode');
        $sut->setPostcode($sample);
        $this->assertSame($sample, $sut['postcode']);
    }


    /**
     * Test attribute "city"
     * @test
     */
    public function it_has_a_City(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['city' => $sample]);

        $this->assertMethodExists($sut, 'getCity');
        $this->assertSame($sample, $sut->getCity());

        $this->assertArrayHasKey('city', $sut);
        $this->assertSame($sample, $sut['city']);

    }

    /**
     * Test attribute "city"
     * @test
     */
    public function it_has_a_setter_for_City(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setCity');
        $sut->setCity($sample);
        $this->assertSame($sample, $sut['city']);
    }


    /**
     * Test attribute "phone"
     * @test
     */
    public function it_has_a_Phone(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['phone' => $sample]);

        $this->assertMethodExists($sut, 'getPhone');
        $this->assertSame($sample, $sut->getPhone());

        $this->assertArrayHasKey('phone', $sut);
        $this->assertSame($sample, $sut['phone']);

    }

    /**
     * Test attribute "phone"
     * @test
     */
    public function it_has_a_setter_for_Phone(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setPhone');
        $sut->setPhone($sample);
        $this->assertSame($sample, $sut['phone']);
    }


    /**
     * Test attribute "country"
     * @test
     */
    public function it_has_a_Country(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address(['country' => $sample]);

        $this->assertMethodExists($sut, 'getCountry');
        $this->assertSame($sample, $sut->getCountry());

        $this->assertArrayHasKey('country', $sut);
        $this->assertSame($sample, $sut['country']);

    }

    /**
     * Test attribute "country"
     * @test
     */
    public function it_has_a_setter_for_Country(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Address();

        $this->assertMethodExists($sut, 'setCountry');
        $sut->setCountry($sample);
        $this->assertSame($sample, $sut['country']);
    }

    private function assertMethodExists(Address $sut, string $methodName): void
    {
        try {
            $_ = (new \ReflectionClass($sut))->getMethod($methodName);
        } catch (\ReflectionException $e) {
            self::fail("No public method {$methodName} found in " . get_class($sut));
        }
        $this->assertTrue(true);
    }

    private function buildSampleForDataType(string $dataType)
    {
        $isArray = substr($dataType, -2) === '[]';

        if ($isArray) {
            $dataType = substr($dataType, 0, strlen($dataType)-2);
        }

        $isMap = substr($dataType, 0, 3) === 'map';
        if ($isMap) {
            $isArray = true;
            $dataType = 'string';
        }

        switch ($dataType) {
            case '\SplFileObject':
                $sampleData = new \SplFileObject('php://memory');
                break;
            case 'object':
                $sampleData = $this->createStub('\stdClass');
                break;
            case 'integer':
            case 'int':
                $sampleData = random_int(100, 10000);
                break;
            case 'double':
            case 'float':
                $sampleData = random_int(100, 10000)/pi();
                break;
            case 'bool':
            case 'boolean':
                $sampleData = (bool)random_int(0, 1);
                break;
            case 'string':
            case 'text':
                $sampleData = uniqid('a_string');
                break;
            default:
                $sampleData = $this->createStub($dataType);
        }

        if ($isArray) {
            $sampleData = [$sampleData];
        }
        return $sampleData;
    }
}
