<?php
/**
 * ChannelNotificationReferenceTypeTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Client\Channel\Model;

use PHPUnit\Framework\TestCase;

/**
 * ChannelNotificationReferenceTypeTest Class Doc Comment
 *
 * @category    Class
 * @description ChannelNotificationReferenceType
 * @package     JTL\SCX\Client\Channel
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Client\Channel\Model\ChannelNotificationReferenceType
 */
class ChannelNotificationReferenceTypeTest extends TestCase
{

    /**
     * Test Enum Value "OFFER"
     * @test
     */
    public function is_a_const_OFFER(): void
    {
        self::assertEquals('OFFER', ChannelNotificationReferenceType::OFFER);
        $sut = new ChannelNotificationReferenceType('OFFER');
        self::assertEquals('OFFER', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "OFFER"
     * @test
     */
    public function it_can_be_constructed_forOFFER(): void
    {
        $sut = ChannelNotificationReferenceType::OFFER();
        self::assertInstanceOf(ChannelNotificationReferenceType::class, $sut);
    }
    /**
     * Test Enum Value "CHANNELOFFER"
     * @test
     */
    public function is_a_const_CHANNELOFFER(): void
    {
        self::assertEquals('CHANNELOFFER', ChannelNotificationReferenceType::CHANNELOFFER);
        $sut = new ChannelNotificationReferenceType('CHANNELOFFER');
        self::assertEquals('CHANNELOFFER', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "CHANNELOFFER"
     * @test
     */
    public function it_can_be_constructed_forCHANNELOFFER(): void
    {
        $sut = ChannelNotificationReferenceType::CHANNELOFFER();
        self::assertInstanceOf(ChannelNotificationReferenceType::class, $sut);
    }
    /**
     * Test Enum Value "ORDERITEMID"
     * @test
     */
    public function is_a_const_ORDERITEMID(): void
    {
        self::assertEquals('ORDERITEMID', ChannelNotificationReferenceType::ORDERITEMID);
        $sut = new ChannelNotificationReferenceType('ORDERITEMID');
        self::assertEquals('ORDERITEMID', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "ORDERITEMID"
     * @test
     */
    public function it_can_be_constructed_forORDERITEMID(): void
    {
        $sut = ChannelNotificationReferenceType::ORDERITEMID();
        self::assertInstanceOf(ChannelNotificationReferenceType::class, $sut);
    }
    /**
     * Test Enum Value "ORDERID"
     * @test
     */
    public function is_a_const_ORDERID(): void
    {
        self::assertEquals('ORDERID', ChannelNotificationReferenceType::ORDERID);
        $sut = new ChannelNotificationReferenceType('ORDERID');
        self::assertEquals('ORDERID', $sut->getValue());
    }

    /**
     * Test Enum Value Named Constructor "ORDERID"
     * @test
     */
    public function it_can_be_constructed_forORDERID(): void
    {
        $sut = ChannelNotificationReferenceType::ORDERID();
        self::assertInstanceOf(ChannelNotificationReferenceType::class, $sut);
    }

    /**
     * Test allowed values from Enum
     * @test
     */
    public function it_has_correct_set_of_allowed_values(): void
    {
        $allowed = [
            ChannelNotificationReferenceType::OFFER,
            ChannelNotificationReferenceType::CHANNELOFFER,
            ChannelNotificationReferenceType::ORDERITEMID,
            ChannelNotificationReferenceType::ORDERID,
        ];
        self::assertEquals($allowed, ChannelNotificationReferenceType::getAllowableEnumValues());
    }

    private function assertMethodExists(ChannelNotificationReferenceType $sut, string $methodName): void
    {
        try {
            $_ = (new \ReflectionClass($sut))->getMethod($methodName);
        } catch (\ReflectionException $e) {
            self::fail("No public method {$methodName} found in " . get_class($sut));
        }
        $this->assertTrue(true);
    }

    private function buildSampleForDataType(string $dataType)
    {
        $isArray = substr($dataType, -2) === '[]';

        if ($isArray) {
            $dataType = substr($dataType, 0, strlen($dataType)-2);
        }

        $isMap = substr($dataType, 0, 3) === 'map';
        if ($isMap) {
            $isArray = true;
            $dataType = 'string';
        }

        switch ($dataType) {
            case '\SplFileObject':
                $sampleData = new \SplFileObject('php://memory');
                break;
            case 'object':
                $sampleData = $this->createStub('\stdClass');
                break;
            case 'integer':
            case 'int':
                $sampleData = random_int(100, 10000);
                break;
            case 'double':
            case 'float':
                $sampleData = random_int(100, 10000)/pi();
                break;
            case 'bool':
            case 'boolean':
                $sampleData = (bool)random_int(0, 1);
                break;
            case 'string':
            case 'text':
                $sampleData = uniqid('a_string');
                break;
            default:
                $sampleData = $this->createStub($dataType);
        }

        if ($isArray) {
            $sampleData = [$sampleData];
        }
        return $sampleData;
    }
}
