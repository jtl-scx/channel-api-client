<?php
/**
 * AttributeTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Client\Channel\Model;

use PHPUnit\Framework\TestCase;

/**
 * AttributeTest Class Doc Comment
 *
 * @category    Class
 * @description Attribute
 * @package     JTL\SCX\Client\Channel
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Client\Channel\Model\Attribute
 */
class AttributeTest extends TestCase
{



    /**
     * Test attribute "attributeId"
     * @test
     */
    public function it_has_a_AttributeId(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute(['attributeId' => $sample]);

        $this->assertMethodExists($sut, 'getAttributeId');
        $this->assertSame($sample, $sut->getAttributeId());

        $this->assertArrayHasKey('attributeId', $sut);
        $this->assertSame($sample, $sut['attributeId']);

    }

    /**
     * Test attribute "attributeId"
     * @test
     */
    public function it_has_a_setter_for_AttributeId(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setAttributeId');
        $sut->setAttributeId($sample);
        $this->assertSame($sample, $sut['attributeId']);
    }


    /**
     * Test attribute "displayName"
     * @test
     */
    public function it_has_a_DisplayName(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute(['displayName' => $sample]);

        $this->assertMethodExists($sut, 'getDisplayName');
        $this->assertSame($sample, $sut->getDisplayName());

        $this->assertArrayHasKey('displayName', $sut);
        $this->assertSame($sample, $sut['displayName']);

    }

    /**
     * Test attribute "displayName"
     * @test
     */
    public function it_has_a_setter_for_DisplayName(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setDisplayName');
        $sut->setDisplayName($sample);
        $this->assertSame($sample, $sut['displayName']);
    }


    /**
     * Test attribute "isMultipleAllowed"
     * @test
     */
    public function it_has_a_IsMultipleAllowed(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new Attribute(['isMultipleAllowed' => $sample]);

        $this->assertMethodExists($sut, 'getIsMultipleAllowed');
        $this->assertSame($sample, $sut->getIsMultipleAllowed());

        $this->assertArrayHasKey('isMultipleAllowed', $sut);
        $this->assertSame($sample, $sut['isMultipleAllowed']);

    }

    /**
     * Test attribute "isMultipleAllowed"
     * @test
     */
    public function it_has_a_setter_for_IsMultipleAllowed(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setIsMultipleAllowed');
        $sut->setIsMultipleAllowed($sample);
        $this->assertSame($sample, $sut['isMultipleAllowed']);
    }

    /**
     * Test allowed values for type
     * @test
     */
    public function it_has_correct_allowed_values_for_type(): void
    {
        $allowed = [
            'smalltext','htmltext','text','integer','decimal','enum','date','boolean',
        ];

        $sut = new Attribute();
        $this->assertMethodExists($sut, 'getTypeAllowableValues');
        $this->assertEquals($allowed, $sut->getTypeAllowableValues());
    }

    /**
     * Test attribute "type"
     * @test
     */
    public function it_has_a_Type(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute(['type' => $sample]);

        $this->assertMethodExists($sut, 'getType');
        $this->assertSame($sample, $sut->getType());

        $this->assertArrayHasKey('type', $sut);
        $this->assertSame($sample, $sut['type']);

    }

    /**
     * Test attribute "type"
     * @test
     */
    public function it_has_a_setter_for_Type(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setType');
        $sut->setType($sample);
        $this->assertSame($sample, $sut['type']);
    }


    /**
     * Test attribute "values"
     * @test
     */
    public function it_has_a_Values(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\AllowedValue[]');
        $sut = new Attribute(['values' => $sample]);

        $this->assertMethodExists($sut, 'getValues');
        $this->assertSame($sample, $sut->getValues());

        $this->assertArrayHasKey('values', $sut);
        $this->assertSame($sample, $sut['values']);

    }

    /**
     * Test attribute "values"
     * @test
     */
    public function it_has_a_setter_for_Values(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\AllowedValue[]');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setValues');
        $sut->setValues($sample);
        $this->assertSame($sample, $sut['values']);
    }


    /**
     * Test attribute "attributeValueValidation"
     * @test
     */
    public function it_has_a_AttributeValueValidation(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute(['attributeValueValidation' => $sample]);

        $this->assertMethodExists($sut, 'getAttributeValueValidation');
        $this->assertSame($sample, $sut->getAttributeValueValidation());

        $this->assertArrayHasKey('attributeValueValidation', $sut);
        $this->assertSame($sample, $sut['attributeValueValidation']);

    }

    /**
     * Test attribute "attributeValueValidation"
     * @test
     */
    public function it_has_a_setter_for_AttributeValueValidation(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setAttributeValueValidation');
        $sut->setAttributeValueValidation($sample);
        $this->assertSame($sample, $sut['attributeValueValidation']);
    }


    /**
     * Test attribute "conditionalMandatoryBy"
     * @test
     */
    public function it_has_a_ConditionalMandatoryBy(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\AttributeConditionalMandatoryBy[]');
        $sut = new Attribute(['conditionalMandatoryBy' => $sample]);

        $this->assertMethodExists($sut, 'getConditionalMandatoryBy');
        $this->assertSame($sample, $sut->getConditionalMandatoryBy());

        $this->assertArrayHasKey('conditionalMandatoryBy', $sut);
        $this->assertSame($sample, $sut['conditionalMandatoryBy']);

    }

    /**
     * Test attribute "conditionalMandatoryBy"
     * @test
     */
    public function it_has_a_setter_for_ConditionalMandatoryBy(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\AttributeConditionalMandatoryBy[]');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setConditionalMandatoryBy');
        $sut->setConditionalMandatoryBy($sample);
        $this->assertSame($sample, $sut['conditionalMandatoryBy']);
    }


    /**
     * Test attribute "conditionalOptionalBy"
     * @test
     */
    public function it_has_a_ConditionalOptionalBy(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\AttributeConditionalOptionalBy[]');
        $sut = new Attribute(['conditionalOptionalBy' => $sample]);

        $this->assertMethodExists($sut, 'getConditionalOptionalBy');
        $this->assertSame($sample, $sut->getConditionalOptionalBy());

        $this->assertArrayHasKey('conditionalOptionalBy', $sut);
        $this->assertSame($sample, $sut['conditionalOptionalBy']);

    }

    /**
     * Test attribute "conditionalOptionalBy"
     * @test
     */
    public function it_has_a_setter_for_ConditionalOptionalBy(): void
    {
        $sample = $this->buildSampleForDataType('\JTL\SCX\Client\Channel\Model\AttributeConditionalOptionalBy[]');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setConditionalOptionalBy');
        $sut->setConditionalOptionalBy($sample);
        $this->assertSame($sample, $sut['conditionalOptionalBy']);
    }


    /**
     * Test attribute "required"
     * @test
     */
    public function it_has_a_Required(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new Attribute(['required' => $sample]);

        $this->assertMethodExists($sut, 'getRequired');
        $this->assertSame($sample, $sut->getRequired());

        $this->assertArrayHasKey('required', $sut);
        $this->assertSame($sample, $sut['required']);

    }

    /**
     * Test attribute "required"
     * @test
     */
    public function it_has_a_setter_for_Required(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setRequired');
        $sut->setRequired($sample);
        $this->assertSame($sample, $sut['required']);
    }


    /**
     * Test attribute "recommended"
     * @test
     */
    public function it_has_a_Recommended(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new Attribute(['recommended' => $sample]);

        $this->assertMethodExists($sut, 'getRecommended');
        $this->assertSame($sample, $sut->getRecommended());

        $this->assertArrayHasKey('recommended', $sut);
        $this->assertSame($sample, $sut['recommended']);

    }

    /**
     * Test attribute "recommended"
     * @test
     */
    public function it_has_a_setter_for_Recommended(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setRecommended');
        $sut->setRecommended($sample);
        $this->assertSame($sample, $sut['recommended']);
    }


    /**
     * Test attribute "section"
     * @test
     */
    public function it_has_a_Section(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute(['section' => $sample]);

        $this->assertMethodExists($sut, 'getSection');
        $this->assertSame($sample, $sut->getSection());

        $this->assertArrayHasKey('section', $sut);
        $this->assertSame($sample, $sut['section']);

    }

    /**
     * Test attribute "section"
     * @test
     */
    public function it_has_a_setter_for_Section(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setSection');
        $sut->setSection($sample);
        $this->assertSame($sample, $sut['section']);
    }


    /**
     * Test attribute "sectionPosition"
     * @test
     */
    public function it_has_a_SectionPosition(): void
    {
        $sample = $this->buildSampleForDataType('int');
        $sut = new Attribute(['sectionPosition' => $sample]);

        $this->assertMethodExists($sut, 'getSectionPosition');
        $this->assertSame($sample, $sut->getSectionPosition());

        $this->assertArrayHasKey('sectionPosition', $sut);
        $this->assertSame($sample, $sut['sectionPosition']);

    }

    /**
     * Test attribute "sectionPosition"
     * @test
     */
    public function it_has_a_setter_for_SectionPosition(): void
    {
        $sample = $this->buildSampleForDataType('int');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setSectionPosition');
        $sut->setSectionPosition($sample);
        $this->assertSame($sample, $sut['sectionPosition']);
    }


    /**
     * Test attribute "subSection"
     * @test
     */
    public function it_has_a_SubSection(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute(['subSection' => $sample]);

        $this->assertMethodExists($sut, 'getSubSection');
        $this->assertSame($sample, $sut->getSubSection());

        $this->assertArrayHasKey('subSection', $sut);
        $this->assertSame($sample, $sut['subSection']);

    }

    /**
     * Test attribute "subSection"
     * @test
     */
    public function it_has_a_setter_for_SubSection(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setSubSection');
        $sut->setSubSection($sample);
        $this->assertSame($sample, $sut['subSection']);
    }


    /**
     * Test attribute "subSectionPosition"
     * @test
     */
    public function it_has_a_SubSectionPosition(): void
    {
        $sample = $this->buildSampleForDataType('int');
        $sut = new Attribute(['subSectionPosition' => $sample]);

        $this->assertMethodExists($sut, 'getSubSectionPosition');
        $this->assertSame($sample, $sut->getSubSectionPosition());

        $this->assertArrayHasKey('subSectionPosition', $sut);
        $this->assertSame($sample, $sut['subSectionPosition']);

    }

    /**
     * Test attribute "subSectionPosition"
     * @test
     */
    public function it_has_a_setter_for_SubSectionPosition(): void
    {
        $sample = $this->buildSampleForDataType('int');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setSubSectionPosition');
        $sut->setSubSectionPosition($sample);
        $this->assertSame($sample, $sut['subSectionPosition']);
    }


    /**
     * Test attribute "description"
     * @test
     */
    public function it_has_a_Description(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute(['description' => $sample]);

        $this->assertMethodExists($sut, 'getDescription');
        $this->assertSame($sample, $sut->getDescription());

        $this->assertArrayHasKey('description', $sut);
        $this->assertSame($sample, $sut['description']);

    }

    /**
     * Test attribute "description"
     * @test
     */
    public function it_has_a_setter_for_Description(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setDescription');
        $sut->setDescription($sample);
        $this->assertSame($sample, $sut['description']);
    }


    /**
     * Test attribute "isVariationDimension"
     * @test
     */
    public function it_has_a_IsVariationDimension(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new Attribute(['isVariationDimension' => $sample]);

        $this->assertMethodExists($sut, 'getIsVariationDimension');
        $this->assertSame($sample, $sut->getIsVariationDimension());

        $this->assertArrayHasKey('isVariationDimension', $sut);
        $this->assertSame($sample, $sut['isVariationDimension']);

    }

    /**
     * Test attribute "isVariationDimension"
     * @test
     */
    public function it_has_a_setter_for_IsVariationDimension(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setIsVariationDimension');
        $sut->setIsVariationDimension($sample);
        $this->assertSame($sample, $sut['isVariationDimension']);
    }


    /**
     * Test attribute "enumValues"
     * @test
     */
    public function it_has_a_EnumValues(): void
    {
        $sample = $this->buildSampleForDataType('string[]');
        $sut = new Attribute(['enumValues' => $sample]);

        $this->assertMethodExists($sut, 'getEnumValues');
        $this->assertSame($sample, $sut->getEnumValues());

        $this->assertArrayHasKey('enumValues', $sut);
        $this->assertSame($sample, $sut['enumValues']);

    }

    /**
     * Test attribute "enumValues"
     * @test
     */
    public function it_has_a_setter_for_EnumValues(): void
    {
        $sample = $this->buildSampleForDataType('string[]');
        $sut = new Attribute();

        $this->assertMethodExists($sut, 'setEnumValues');
        $sut->setEnumValues($sample);
        $this->assertSame($sample, $sut['enumValues']);
    }

    private function assertMethodExists(Attribute $sut, string $methodName): void
    {
        try {
            $_ = (new \ReflectionClass($sut))->getMethod($methodName);
        } catch (\ReflectionException $e) {
            self::fail("No public method {$methodName} found in " . get_class($sut));
        }
        $this->assertTrue(true);
    }

    private function buildSampleForDataType(string $dataType)
    {
        $isArray = substr($dataType, -2) === '[]';

        if ($isArray) {
            $dataType = substr($dataType, 0, strlen($dataType)-2);
        }

        $isMap = substr($dataType, 0, 3) === 'map';
        if ($isMap) {
            $isArray = true;
            $dataType = 'string';
        }

        switch ($dataType) {
            case '\SplFileObject':
                $sampleData = new \SplFileObject('php://memory');
                break;
            case 'object':
                $sampleData = $this->createStub('\stdClass');
                break;
            case 'integer':
            case 'int':
                $sampleData = random_int(100, 10000);
                break;
            case 'double':
            case 'float':
                $sampleData = random_int(100, 10000)/pi();
                break;
            case 'bool':
            case 'boolean':
                $sampleData = (bool)random_int(0, 1);
                break;
            case 'string':
            case 'text':
                $sampleData = uniqid('a_string');
                break;
            default:
                $sampleData = $this->createStub($dataType);
        }

        if ($isArray) {
            $sampleData = [$sampleData];
        }
        return $sampleData;
    }
}
