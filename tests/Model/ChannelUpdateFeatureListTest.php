<?php
/**
 * ChannelUpdateFeatureListTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  JTL\SCX\Client\Channel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SCX Channel API
 *
 * SCX Channel API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace JTL\SCX\Client\Channel\Model;

use PHPUnit\Framework\TestCase;

/**
 * ChannelUpdateFeatureListTest Class Doc Comment
 *
 * @category    Class
 * @description ChannelUpdateFeatureList
 * @package     JTL\SCX\Client\Channel
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 * @covers      \JTL\SCX\Client\Channel\Model\ChannelUpdateFeatureList
 */
class ChannelUpdateFeatureListTest extends TestCase
{


    /**
     * Test allowed values for invoiceDocumentTransfer
     * @test
     */
    public function it_has_correct_allowed_values_for_invoiceDocumentTransfer(): void
    {
        $allowed = [
            'not-supported','from-channel','from-seller',
        ];

        $sut = new ChannelUpdateFeatureList();
        $this->assertMethodExists($sut, 'getInvoiceDocumentTransferAllowableValues');
        $this->assertEquals($allowed, $sut->getInvoiceDocumentTransferAllowableValues());
    }

    /**
     * Test attribute "invoiceDocumentTransfer"
     * @test
     */
    public function it_has_a_InvoiceDocumentTransfer(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new ChannelUpdateFeatureList(['invoiceDocumentTransfer' => $sample]);

        $this->assertMethodExists($sut, 'getInvoiceDocumentTransfer');
        $this->assertSame($sample, $sut->getInvoiceDocumentTransfer());

        $this->assertArrayHasKey('invoiceDocumentTransfer', $sut);
        $this->assertSame($sample, $sut['invoiceDocumentTransfer']);

    }

    /**
     * Test attribute "invoiceDocumentTransfer"
     * @test
     */
    public function it_has_a_setter_for_InvoiceDocumentTransfer(): void
    {
        $sample = $this->buildSampleForDataType('string');
        $sut = new ChannelUpdateFeatureList();

        $this->assertMethodExists($sut, 'setInvoiceDocumentTransfer');
        $sut->setInvoiceDocumentTransfer($sample);
        $this->assertSame($sample, $sut['invoiceDocumentTransfer']);
    }


    /**
     * Test attribute "priceUpdatesSupported"
     * @test
     */
    public function it_has_a_PriceUpdatesSupported(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList(['priceUpdatesSupported' => $sample]);

        $this->assertMethodExists($sut, 'getPriceUpdatesSupported');
        $this->assertSame($sample, $sut->getPriceUpdatesSupported());

        $this->assertArrayHasKey('priceUpdatesSupported', $sut);
        $this->assertSame($sample, $sut['priceUpdatesSupported']);

    }

    /**
     * Test attribute "priceUpdatesSupported"
     * @test
     */
    public function it_has_a_setter_for_PriceUpdatesSupported(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList();

        $this->assertMethodExists($sut, 'setPriceUpdatesSupported');
        $sut->setPriceUpdatesSupported($sample);
        $this->assertSame($sample, $sut['priceUpdatesSupported']);
    }


    /**
     * Test attribute "quantityPriceSupported"
     * @test
     */
    public function it_has_a_QuantityPriceSupported(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList(['quantityPriceSupported' => $sample]);

        $this->assertMethodExists($sut, 'getQuantityPriceSupported');
        $this->assertSame($sample, $sut->getQuantityPriceSupported());

        $this->assertArrayHasKey('quantityPriceSupported', $sut);
        $this->assertSame($sample, $sut['quantityPriceSupported']);

    }

    /**
     * Test attribute "quantityPriceSupported"
     * @test
     */
    public function it_has_a_setter_for_QuantityPriceSupported(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList();

        $this->assertMethodExists($sut, 'setQuantityPriceSupported');
        $sut->setQuantityPriceSupported($sample);
        $this->assertSame($sample, $sut['quantityPriceSupported']);
    }


    /**
     * Test attribute "remainingQuanitySupported"
     * @test
     */
    public function it_has_a_RemainingQuanitySupported(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList(['remainingQuanitySupported' => $sample]);

        $this->assertMethodExists($sut, 'getRemainingQuanitySupported');
        $this->assertSame($sample, $sut->getRemainingQuanitySupported());

        $this->assertArrayHasKey('remainingQuanitySupported', $sut);
        $this->assertSame($sample, $sut['remainingQuanitySupported']);

    }

    /**
     * Test attribute "remainingQuanitySupported"
     * @test
     */
    public function it_has_a_setter_for_RemainingQuanitySupported(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList();

        $this->assertMethodExists($sut, 'setRemainingQuanitySupported');
        $sut->setRemainingQuanitySupported($sample);
        $this->assertSame($sample, $sut['remainingQuanitySupported']);
    }


    /**
     * Test attribute "variationsSupported"
     * @test
     */
    public function it_has_a_VariationsSupported(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList(['variationsSupported' => $sample]);

        $this->assertMethodExists($sut, 'getVariationsSupported');
        $this->assertSame($sample, $sut->getVariationsSupported());

        $this->assertArrayHasKey('variationsSupported', $sut);
        $this->assertSame($sample, $sut['variationsSupported']);

    }

    /**
     * Test attribute "variationsSupported"
     * @test
     */
    public function it_has_a_setter_for_VariationsSupported(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList();

        $this->assertMethodExists($sut, 'setVariationsSupported');
        $sut->setVariationsSupported($sample);
        $this->assertSame($sample, $sut['variationsSupported']);
    }


    /**
     * Test attribute "returnTrackingRequired"
     * @test
     */
    public function it_has_a_ReturnTrackingRequired(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList(['returnTrackingRequired' => $sample]);

        $this->assertMethodExists($sut, 'getReturnTrackingRequired');
        $this->assertSame($sample, $sut->getReturnTrackingRequired());

        $this->assertArrayHasKey('returnTrackingRequired', $sut);
        $this->assertSame($sample, $sut['returnTrackingRequired']);

    }

    /**
     * Test attribute "returnTrackingRequired"
     * @test
     */
    public function it_has_a_setter_for_ReturnTrackingRequired(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList();

        $this->assertMethodExists($sut, 'setReturnTrackingRequired');
        $sut->setReturnTrackingRequired($sample);
        $this->assertSame($sample, $sut['returnTrackingRequired']);
    }


    /**
     * Test attribute "allowCombineOrders"
     * @test
     */
    public function it_has_a_AllowCombineOrders(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList(['allowCombineOrders' => $sample]);

        $this->assertMethodExists($sut, 'getAllowCombineOrders');
        $this->assertSame($sample, $sut->getAllowCombineOrders());

        $this->assertArrayHasKey('allowCombineOrders', $sut);
        $this->assertSame($sample, $sut['allowCombineOrders']);

    }

    /**
     * Test attribute "allowCombineOrders"
     * @test
     */
    public function it_has_a_setter_for_AllowCombineOrders(): void
    {
        $sample = $this->buildSampleForDataType('bool');
        $sut = new ChannelUpdateFeatureList();

        $this->assertMethodExists($sut, 'setAllowCombineOrders');
        $sut->setAllowCombineOrders($sample);
        $this->assertSame($sample, $sut['allowCombineOrders']);
    }

    private function assertMethodExists(ChannelUpdateFeatureList $sut, string $methodName): void
    {
        try {
            $_ = (new \ReflectionClass($sut))->getMethod($methodName);
        } catch (\ReflectionException $e) {
            self::fail("No public method {$methodName} found in " . get_class($sut));
        }
        $this->assertTrue(true);
    }

    private function buildSampleForDataType(string $dataType)
    {
        $isArray = substr($dataType, -2) === '[]';

        if ($isArray) {
            $dataType = substr($dataType, 0, strlen($dataType)-2);
        }

        $isMap = substr($dataType, 0, 3) === 'map';
        if ($isMap) {
            $isArray = true;
            $dataType = 'string';
        }

        switch ($dataType) {
            case '\SplFileObject':
                $sampleData = new \SplFileObject('php://memory');
                break;
            case 'object':
                $sampleData = $this->createStub('\stdClass');
                break;
            case 'integer':
            case 'int':
                $sampleData = random_int(100, 10000);
                break;
            case 'double':
            case 'float':
                $sampleData = random_int(100, 10000)/pi();
                break;
            case 'bool':
            case 'boolean':
                $sampleData = (bool)random_int(0, 1);
                break;
            case 'string':
            case 'text':
                $sampleData = uniqid('a_string');
                break;
            default:
                $sampleData = $this->createStub($dataType);
        }

        if ($isArray) {
            $sampleData = [$sampleData];
        }
        return $sampleData;
    }
}
